{"version":3,"sources":["app/Analytics.js","app/OpeningGraph.js","pres/DarkMode.js","app/Constants.js","app/OpeningTreeSerializer.js","pres/loader/Common.js","pres/loader/Filters.js","app/util.js","pres/loader/Actions.js","app/PGNReaderWorker.js","pres/StateManagement.js","app/OpeningBook.js","pres/loader/TimeControlLabels.js","pres/loader/FilterLabels.js","pres/loader/AdvancedFilters.js","app/PGNReader.js","app/CookieManager.js","app/Common.js","app/chess/RacingKingsChess.js","app/chess/CrazyhouseChess.js","app/chess/ChessLogic.js","app/UserProfile.js","app/OpeningManager.js","pres/Navigator.js","pres/GlobalHeader.js","pres/loader/Source.js","pres/loader/Dropzone.js","pres/loader/NotableChessGames.js","pres/loader/User.js","pres/loader/Variants.js","pres/loader/PGNLoader.js","pres/Settings.js","pres/ReportControls.js","pres/moves/MovesCommon.js","pres/moves/MovesSettings.js","pres/moves/MovesTable.js","pres/moves/ResultsTable.js","pres/moves/MovesList.js","pres/moves/BookMoves.js","pres/ControlsContainer.js","pres/SnackbarContentWrapper.js","pres/MainContainer.js","index.js","app/SitePolicy.js"],"names":["trackPageView","ReactGA","pageview","window","location","pathname","trackEvent","category","action","label","value","event","initialize","OpeningGraph","variant","this","graph","Graph","hasMoves","arrayEntries","pgnStats","parsedMoves","lastFen","playerColor","index","length","push","forEach","parsedMove","addMoveForFen","sourceFen","targetFen","moveSan","addGameResultOnFen","addStatsToRoot","fullFen","resultIndex","currNode","getNodeFromGraph","gameResults","targetNode","rootFen","details","hasData","blackWins","whiteWins","draws","totalOpponentElo","shortestGame","longestGame","lastPlayed","newDetails","getUpdatedMoveDetails","node","simplifiedFen","Number","isInteger","updateCalculatedValues","bestWin","bestWinGame","bestWinElo","getOpponentElo","worstLoss","worstLossGame","worstLossElo","lastPlayedGame","longestGameInfo","shortestGameInfo","count","fullSourceFen","fullTargetFen","move","resultObject","playedBy","moveCount","playedByMax","Math","max","book","fen","set","transform","Map","moves","fetch","map","black","white","san","averageElo","averageRating","get","addIfNull","nodes","GraphNode","currentMoveDetails","whiteWin","blackWin","draw","resultInt","result","Constants","opponentElo","currentBestWinGame","parseInt","currentWorstLossGame","currentLastPlayedGame","isDateMoreRecentThan","date","currentLongestGame","numberOfPlys","currentShortestGame","blackElo","whiteElo","Array","from","Object","entries","entry","chess","chessLogic","sloppy","targetNodeDetails","getDetailsForFen","orig","dest","to","level","levelFor","maxCount","handleDarkMode","darkMode","document","body","classList","contains","toggleDarkModeStyles","navBar","querySelector","toggle","toggleLogo","logoSrc","setAttribute","TIME_CONTROL_ULTRA_BULLET","TIME_CONTROL_BULLET","TIME_CONTROL_BLITZ","TIME_CONTROL_RAPID","TIME_CONTROL_CLASSICAL","TIME_CONTROL_CORRESPONDENCE","TIME_CONTROL_DAILY","FILTER_NAME_RATED","FILTER_NAME_SELECTED_TIMEFRAME","FILTER_NAME_DOWNLOAD_LIMIT","FILTER_NAME_ELO_RANGE","SITE_LICHESS","SITE_CHESS_DOT_COM","SITE_PGN_FILE","SITE_EVENT_DB","SITE_PLAYER_DB","SITE_OPENING_TREE_FILE","SITE_ONLINE_TOURNAMENTS","MAX_DOWNLOAD_LIMIT","MAX_ELO_RATING","EVENT_CATEGORY_PGN_LOADER","EVENT_CATEGORY_SETTINGS","EVENT_CATEGORY_LICHESS_LOGIN","EVENT_CATEGORY_MAIN_ACTION","EVENT_CATEGORY_SEGMENT","EVENT_CATEGORY_MOVES_LIST","EVENT_CATEGORY_CONTROLS","EVENT_CATEGORY_NAVIGATOR","EVENT_CATEGORY_CHESSBOARD","EVENT_CATEGORY_MESSAGE_SHOWN","EVENT_CATEGORY_GLOBAL_HEADER","ROOT_FEN","RACING_KINGS_ROOT_FEN","PLAYER_COLOR_WHITE","PLAYER_COLOR_BLACK","LOADER_ANIMATION_DURATION_MS","OPENING_TREE_EMAIL","OPENING_TREE_REDDIT","OPENING_TREE_LICHESS","OPENING_TREE_CHESS_COM","OPENING_TREE_DISCORD","OPENING_TREE_FILE_CURRENT_VERSION","ERROR_ACTION_VISIT_OLD_SITE","ERROR_ACTION_NONE","LICHESS_NOT_LOGGED_IN","LICHESS_STATE_PENDING","LICHESS_LOGGED_IN","LICHESS_FAILED_FETCH","ERROR_SEVERITY_ERROR","ERROR_SEVERITY_SUCCESS","VARIANT_STANDARD","VARIANT_RACING_KINGS","VARIANT_THREE_CHECK","VARIANT_KING_OF_THE_HILL","VARIANT_CRAZYHOUSE","CHESS_COM_RULES_STANDARD","CHESS_COM_RULES_THREE_CHECK","CHESS_COM_RULES_KING_OF_THE_HILL","CHESS_COM_RULES_CRAZYHOUSE","LICHESS_PERF_RACING_KINGS","LICHESS_PERF_THREE_CHECK","LICHESS_PERF_KING_OF_THE_HILL","LICHESS_PERF_CRAZYHOUSE","LICHESS_PERF_STANDARD","LICHESS_HEADER_RACING_KINGS","LICHESS_HEADER_THREE_CHECK","LICHESS_HEADER_KING_OF_THE_HILL","LICHESS_HEADER_STANDARD","LICHESS_HEADER_CRAZYHOUSE","OPENING_BOOK_TYPE_OFF","OPENING_BOOK_TYPE_MASTERS","OPENING_BOOK_TYPE_LICHESS","ALL_BOOK_RATINGS","serializeOpeningTree","treeData","filename","callback","chunkedArray","chunks","chunk","header","arraySizes","arrays","arr","array","prototype","apply","chunkSize","startIndex","i","chunkIndex","slice","chunkArray","deflatedChunks","packControlWord","remainingChunks","hasError","zlib","deflate","Buffer","JSON","stringify","error","data","byteLength","saveAs","Blob","type","deserializeOpeningTree","file","reader","FileReader","onload","evt","target","version","unpackControlWord","numChunks","handleInflate","console","log","parse","e","sortedChunks","sort","a","b","flattenedChunks","el","flat","size","reconstructObjectFromChunks","inflate","getInflatedChunks","onerror","name","message","readAsArrayBuffer","control","view","DataView","getUint16","getUint32","buffer","ArrayBuffer","setUint16","setUint32","Accordion","withStyles","root","border","boxShadow","borderBottom","display","margin","expanded","MUIAccordion","getNumberIcon","n","alt","className","src","height","advancedFilters","state","createSubObjectWithProperties","copyText","elementId","getElementById","select","setSelectionRange","execCommand","User","props","isAdvancedFiltersOpen","timeframeSteps","assign","defaultAdvancedFilters","rated","setState","property","newState","site","SitePolicy","setImmediate","setFilters","bind","checked","newValue","colorError","filtersChange","isDisabled","areAdvancedFiltersApplied","newProps","key","deepEqual","playerName","selectedNotablePlayer","expandedPanel","TransitionComponent","MuiCollapse","TransitionProps","timeout","onChange","handleExpansionChange","disabled","expandIcon","getSummary","component","playerColorChange","color","onClick","toggleState","icon","faCaretUp","faCaretDown","isOpen","toggleRated","handleTimeControlChange","handleTimeframeChange","handleEloRangeChange","handleDownloadLimitChange","React","Component","mainObject","properties","subObject","fenComponents","split","getTimeControlsArray","timeControlState","selected","Common","filter","timeControl","monthLabels","getTimeframeSteps","steps","year","startYear","currentYear","Date","getFullYear","currentMonth","getMonth","toLongLabel","fromLongLabel","month","simplifyCount","toFixed","round","getSelectedTimeFrameData","timeframe","fromIndex","toIndex","fromTimeframe","toTimeframe","currentDate","fromMonth","fromYear","fromTimeStamp","getTimeStampInfoFor","toYear","toMonth","toTimeStamp","minOrMax","getTime","getDate","getDaysInMonth","getPerformanceDetails","totalGames","averageOpponentElo","playerWins","playerLosses","scorePercentage","ratingChange","performanceRating","results","score","abs","than","Actions","unload","pgnReader","stopDownloading","isGamesSubsectionOpen","exportingInProgress","streamsaver","mitm","encoder","TextEncoder","addEventListener","removeEventListener","importOpeningTree","files","err","subMesage","showError","success","importOpeningTreeObject","showInfo","exportOpeningTree","exportOpeningTreeObject","info","fileWriter","close","game","headers","join","moveObject","pendingDownloads","write","encode","getPgnString","then","abortDownloading","shouldDownloadToFile","fileStream","createWriteStream","selectedNotableEvent","getWriter","PGNReader","readerInstance","fetchPGNFromSite","selectedOnlineTournament","proxy","notify","downloadResponse","getTokens","lichess","cookieManager","getLichessAccessToken","readPgn","gamesProcessed","clear","loadedSite","setDownloading","importTreeClicked","startIcon","disableElevation","downloadDisabledReason","isDownloading","load","download","placement","title","exportTreeClicked","stopDownloadingAction","switchToMovesTab","faList","openingTreeLoadActions","regularActions","mainComponent","in","wrap","Worker","turnColor","turn","settings","brushes","againstBrushes","forBrushes","highlightArrow","highlightedMove","calcMovable","dests","SQUARES","s","ms","square","verbose","m","free","orientation","onMove","sanOrOrig","moveObj","promotion","lastMove","onMoveAction","navigateTo","previousMove","updateProcessedGames","downloadLimit","parsedGame","totalGamesProcessed","openingGraph","addPGN","latestFen","downloadingGames","moveToShape","brush","autoShapes","shapes","concat","fillArray","getPlayerMoves","movesForFen","gameResultsForFen","len","reset","settingsChange","settingsToPersist","CookieManager","setSettingsCookie","clearBookNodes","trackingEvent","subMessage","severity","errorActionText","errorAction","url","messageSeverity","open","toggleFeedback","eventName","trackingLabel","closeError","diagnosticsOpen","feedbackOpen","diagnosticsDataOpen","val","toggleDiagnosticsData","copyDiagnostics","importGameState","importState","movesSettings","getChessboardWidth","nearestMultipleOf8","innerWidth","min","innerHeight","getDiagnosticsValue","navigator","userAgent","getRedditLink","getSubject","getBody","getEmailLink","variantChange","newVariant","getBookMoves","getBookNode","openingBookType","forceFetchBookMoves","fetchBookMoves","addBookNode","update","mergePlayerAndBookMoves","playerMovesToShow","bookMovesToShow","bookMovesMap","movesToShow","createMap","bookMove","compareTo","bookScore","getCompareScores","userScore","values","getCompareToValues","addStateManagement","obj","bookSettings","ratings","openingBookRating","speeds","openingBookTimeControls","bookType","joinParams","request","response","paramName","r","timeClasses","selectedTimeControls","unselectedTimeControls","includesAll","subArray","every","v","includes","getTimeControlLabel","timeClass","lichessTimeControlLabel","AdvancedFilters","currentlyOpenAdvancedFilter","timeframeMarks","downloadLimitMarks","eloRangeMarks","filterName","subSectionComponent","setCurrentlyOpenAdvancedFilter","Collapse","getTimeControlFilters","getTimeFrameFilters","selectedEloRange","getEloRangeFilters","getDownloadLimitFilters","Slider","valueLabelDisplay","valueLabelFormat","step","marks","firstRow","middleRow","lastRow","colWidth","FormControl","FormGroup","Container","getTimeControlFilterRow","controls","firstColumnWidth","position","clsName","Row","Col","sm","FormControlLabel","Checkbox","changeCallback","children","getFilters","module","exports","currentVisit","Cookies","remove","path","domain","settingsCookie","lastVisitCookie","visitsCookie","firstVisitCookie","lastVisit","timesVisited","firstVisit","currDate","numVisits","LICHESS_TIME_CONTROLS","CHESS_DOT_COM_TIME_CONTROLS","TIME_CONTROL_LABELS","lichessPerf","DP_TABLE","RacingKingsChess","Chess","options","endsWith","substring","disambiguatedMove","problematicMove","potentialMoves","filteredMoves","potentialMove","charAt","disambiguate","CrazyhouseChess","locationOfAt","indexOf","piece","PAWN","toLowerCase","put","toggleTurn","tokens","UserProfile","userProfile","visitInfo","getVisitInfo","userType","USER_PROFILE_FIRST_TIME_USER","USER_PROFILE_NEW_USER","USER_PROFILE_OCCAISONAL_USER","USER_PROFILE_POWER_USER","USER_PROFILE_FREQUENT_USER","OpeningManager","plys","currentIndex","pgn","ChessLogic","pgnAsList","moveForward","pgnList","pgnSoFar","pgnListSoFar","moveNumber","whitePly","blackPly","currMove","floor","moveTo","Navigator","openingManager","currentMove","keyHandler","keyCode","previous","next","addPly","device","moveBack","opening","ChessEcoCodes","openingCode","code","id","lg","Button","faStepBackward","faStepForward","GlobalHeader","useState","setIsOpen","modal","setModal","toggleModal","isFAQOpen","setFAQOpen","toggleFAQModal","launch","rows","content","styles","rowTitleColor","rowContentColor","rowTitleTextSize","rowContentTextSize","rowContentPaddingTop","config","Navbar","light","expand","width","NavbarBrand","href","NavbarToggler","navbar","Nav","NavItem","NavLink","faDiscord","faComments","UncontrolledDropdown","DropdownToggle","nav","faQuestionCircle","DropdownMenu","right","DropdownItem","divider","Modal","ModalHeader","ListGroup","ListGroupItem","tag","ModalFooter","ModalBody","SOURCE_VARIANT_COMBINATION","Source","source","addNumber","Backup","DateRange","People","Save","faChessRook","siteChange","newSite","supportedSources","AccordionSummary","ExpandMore","aria-controls","getSourceOption","AccordionDetails","RadioGroup","setSite","getSourceRadio","Divider","AccordionActions","continue","isSourceAvailable","Radio","Dropzone","newFiles","filesChange","acceptedFiles","dropzoneText","handleFileChange","dropzoneParagraphClass","showFileNames","useChipsForPreview","previewChipProps","dropzoneClass","filesLimit","maxFileSize","NotableChessGames","updateDetails","option","profile","imageUrl","subText","list","selectedDetail","placeholder","renderOption","renderDetails","tournamentUrl","selectedPlayer","selectedEvent","playerNameError","tournamentUrlError","player","nextProps","trim","startsWith","parsedUrl","URL","hostname","tournamentSite","pathComponents","tournamentId","tournamentType","validateInputDetailsSet","playerDetailsChange","finalPlayerName","setTimeout","getLichessCardBody","getPlayerNameInput","lichessLoginState","Card","Spinner","CardBody","CardTitle","faInfoCircle","faSync","refreshLichessStatus","faSignOutAlt","logoutOfLichess","launchLichessOauth","lichessLoginName","faCheck","CardText","rel","helperText","TextField","editPlayerName","onKeyUp","playerNameKeyUp","getOnlineTournamentCard","getOnlineTournamentInput","editTournamentUrl","setPlayerDetails","notablePlayers","notablePlayerChange","notableEvents","notableEventChange","getPgnFileSelection","getLichessSelection","getChessComSelection","getGoatDBEventSelection","getGoatDBSelection","getOpeningTreeSelection","getOnlineTournamentSelection","getInputsToShow","getVariantIcon","getVariantText","faFlagCheckered","faDiceThree","faMountain","faHouseDamage","faChessKing","style","getVariantOption","changeLink","setVariant","getVariantRadio","PGNLoader","selectedSite","URLSearchParams","search","fetchLichessLoginStatus","panel","newExpanded","timestamp","now","playername","openingTreeSave","saveVersion","setEntries","importCallback","gamesDetails","fetchGOATGames","auth","bearer","responseObj","username","deleteLichessAccessToken","filters","pgnUrl","Filters","SettingsView","srcElement","tagName","faRetweet","clearAction","faTrashAlt","resetAction","faFastBackward","analyse","faDesktop","faMoon","ReportControls","stopPropagation","simplifiedView","multiline","rowsMax","inputProps","fontSize","spellCheck","copyFen","moveDetails","getFenField","switchToUserTab","faUser","performanceDetails","class","Table","eatClicks","isNaN","TableHead","TableRow","TableCell","TableBody","launchGame","faExternalLinkAlt","removeQuestionMarksFromDate","reportFooter","TableFooter","colSpan","playerDetails","elo","MovesSettings","mSettings","getTransformedBookType","indicatorInfoOpen","isArray","newMovesSettings","cancel","getOpeningBookType","getOpeningBookRating","getOpeningBookTimeControls","getIndicatorSwitch","Link","toggleIndicatorInfo","Switch","updateMoveSetting","mastersBookAvailable","ToggleButtonGroup","exclusive","aria-label","ToggleButton","MovesTable","openPerformanceIndex","moveSettingsOpen","prevProps","prevState","clickedEventName","moveIndex","compareToClicked","percent","stepPositions","getIndicator","constructAlt","compareToAlt","compareClicked","altTitle","click","transition","accomplished","performancePopoverOpen","openMove","Popover","trigger","namespace","togglePerformancePopover","getTranspositionWarningLevel","getInfoIcon","targetCount","difference","faWrench","toggleMovesSettings","updateSettings","getSingleItemRow","getMultiItemRow","tableFooter","isTouchDevice","highlightMove","onMouseOver","highlightArrowFn","onMouseOut","getPopover","openingBookScoreIndicator","compareScores","Progress","multi","bar","percentage","getProgressLabel","openingBookWinsIndicator","compareProgress","faExclamationTriangle","total","showAsPercentage","sampleResultWhite","sampleResultBlack","sampleResult","ResultsTable","whitePlayer","blackPlayer","MovesList","playerMoves","resultsTable","movesTable","switchToBookTab","BookMove","bookMoves","offCard","enableBook","tab","actionText","actionIcon","ControlsContainer","activeTab","activeGame","resize","highlightPlayerMove","highlightBookMove","tabs","classnames","active","faBook","Badge","faChartBar","faCog","TabContent","TabPane","tabId","bookResults","variantIcon","CheckCircleIcon","warning","WarningIcon","ErrorIcon","InfoIcon","theme","backgroundColor","green","palette","dark","primary","amber","iconVariant","opacity","marginRight","spacing","alignItems","classes","onClose","showReportButton","other","Icon","SnackbarContent","clsx","aria-describedby","IconButton","MainContainer","getUserProfile","selectedVariant","getMovesSettingsFromCookie","getDarkModeSettingFromCookie","chessboardWidth","handleResize","getSettingsCookie","darMode","Boolean","lastMoveArray","snackBarOpen","order","xs","movable","drawable","enabled","visible","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","ReactDOM","render","isAdvancedFiltersEnabled","isFilterPanelEnabled","treeSaveDisabledReason","exportFileName","extension"],"mappings":"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","file":"static/js/main.cbd6882b.chunk.js","sourcesContent":["import ReactGA from 'react-ga';\nReactGA.initialize('UA-159149755-1');\n\nexport function trackPageView() {\n    ReactGA.pageview(window.location.pathname);\n}\n\nexport function trackEvent(category, action, label, value) {\n    ReactGA.event({\n        category: category,\n        action: action,\n        label: label,\n        value: value\n      })\n}\n\n","import {simplifiedFen, isDateMoreRecentThan} from './util'\nimport * as Constants from './Constants'\nimport {chessLogic, rootFen} from '../app/chess/ChessLogic'\n\nexport default class OpeningGraph {\n    constructor(variant) {\n        this.graph=new Graph()\n        this.hasMoves = false\n        this.variant = variant\n    }\n    setEntries(arrayEntries, pgnStats){\n        this.graph=new Graph(arrayEntries, pgnStats)\n        this.hasMoves = true\n    }\n\n    clear() {\n        this.graph = new Graph()\n        this.hasMoves = false\n    }\n\n    addPGN(pgnStats, parsedMoves, lastFen, playerColor) {\n        pgnStats.index = this.graph.pgnStats.length\n        this.graph.pgnStats.push(pgnStats)\n        this.graph.playerColor = playerColor\n        this.hasMoves = true\n        parsedMoves.forEach(parsedMove => {\n            this.addMoveForFen(parsedMove.sourceFen, parsedMove.targetFen, parsedMove.moveSan, pgnStats)\n        })\n        this.addGameResultOnFen(lastFen, pgnStats.index)\n        this.addStatsToRoot(pgnStats, this.variant)\n    }\n\n    addGameResultOnFen(fullFen, resultIndex) {\n        var currNode = this.getNodeFromGraph(fullFen, true)\n        if(!currNode.gameResults) {\n            currNode.gameResults = []\n        }\n        currNode.gameResults.push(resultIndex)\n    }\n    addStatsToRoot(pgnStats, variant) {\n        var targetNode = this.getNodeFromGraph(rootFen(variant), true)\n        if(!targetNode.details) {\n            targetNode.details = emptyDetails()\n        }\n        let newDetails = this.getUpdatedMoveDetails(targetNode.details, pgnStats)\n        targetNode.details = newDetails\n    }\n\n    getDetailsForFen(fullFen) {\n        let node = this.getNodeFromGraph(simplifiedFen(fullFen), false)\n        let details = node && node.details\n        if (Number.isInteger(details)) {\n            details = this.getUpdatedMoveDetails(emptyDetails(), this.graph.pgnStats[details])\n        } else if(!details) {\n            return emptyDetails()\n        }\n        details = this.updateCalculatedValues(details)   \n        return details\n    }\n\n    updateCalculatedValues(details) {\n        if(Number.isInteger(details.bestWin)) {\n            details.bestWinGame = this.graph.pgnStats[details.bestWin]\n            details.bestWinElo = this.getOpponentElo(this.graph.playerColor,details.bestWinGame)\n        }\n        if(Number.isInteger(details.worstLoss)) {\n            details.worstLossGame = this.graph.pgnStats[details.worstLoss]\n            details.worstLossElo = this.getOpponentElo(this.graph.playerColor,details.worstLossGame)\n        }\n        if(Number.isInteger(details.lastPlayed)) {\n            details.lastPlayedGame = this.graph.pgnStats[details.lastPlayed]\n        }\n        if(Number.isInteger(details.longestGame)) {\n            details.longestGameInfo = this.graph.pgnStats[details.longestGame]\n        }\n        if(Number.isInteger(details.shortestGame)) {\n            details.shortestGameInfo = this.graph.pgnStats[details.shortestGame]\n        }\n        details.count = details.whiteWins+details.blackWins+details.draws\n        return details\n\n    }\n\n    addMoveForFen(fullSourceFen, fullTargetFen, move, resultObject) {\n        var targetNode = this.getNodeFromGraph(fullTargetFen, true)\n        let newDetails = this.getUpdatedMoveDetails(targetNode.details, resultObject)\n        targetNode.details = newDetails\n\n        var currNode = this.getNodeFromGraph(fullSourceFen, true)\n        if(!currNode.playedBy) {\n            currNode.playedBy = {}\n        }\n        let moveCount = currNode.playedBy[move]\n        if(!moveCount) {\n            moveCount = 0\n        }\n        moveCount = moveCount+1\n        currNode.playedBy[move] = moveCount\n        currNode.playedByMax = Math.max(currNode.playedByMax, moveCount)\n    }\n\n    addBookNode(fullFen, book) {\n        let fen = simplifiedFen(fullFen)\n        this.graph.book.set(fen, this.transform(book))\n    }\n    clearBookNodes(){\n        this.graph.book = new Map()\n    }\n    transform(book) {\n        if(!book || !book.moves) {\n            return book\n        }\n        return {\n            fetch:\"success\",\n            moves:book.moves.map((move)=>{\n                let count = move.black+move.white+move.draws\n                return {\n                    san:move.san,\n                    details:{\n                        hasData:true,\n                        blackWins:move.black,\n                        whiteWins:move.white,\n                        draws:move.draws,\n                        count:count,\n                        averageElo:move.averageRating\n                    },\n                    moveCount:count\n                }\n            })\n        }\n    }\n    getBookNode(fullFen) {\n        let fen = simplifiedFen(fullFen)\n        return this.graph.book.get(fen)\n    }\n\n    getNodeFromGraph(fullFen, addIfNull) {\n        let fen = simplifiedFen(fullFen)\n        var currNode = this.graph.nodes.get(fen)\n        if(!currNode && addIfNull) {\n            currNode = new GraphNode()\n            currNode.fen = fen\n            this.graph.nodes.set(fen, currNode)\n        }\n        return currNode\n    }\n\n    getUpdatedMoveDetails(currentMoveDetails, resultObject) {\n        if(Number.isInteger(currentMoveDetails)) {\n            // if this is the second stat object being added\n            // calculate the first move details and then merge it with the second one\n            currentMoveDetails = this.getUpdatedMoveDetails(emptyDetails(),\n                            this.graph.pgnStats[currentMoveDetails])\n        } else if(!currentMoveDetails) {\n            // if this is the first stat being added to this node,\n            // just write the index to calculate the stats later\n            return resultObject.index\n        }\n        \n        let whiteWin = 0, blackWin = 0, draw = 0, resultInt = 0;\n        let playerColor = this.graph.playerColor\n        if(resultObject.result === '1-0') {\n            whiteWin = 1\n            resultInt = playerColor === Constants.PLAYER_COLOR_WHITE? 1 : -1\n        } else if (resultObject.result === '0-1') {\n            blackWin = 1\n            resultInt = playerColor === Constants.PLAYER_COLOR_BLACK? 1 : -1\n        } else {\n            draw = 1\n        }\n\n        let opponentElo = this.getOpponentElo(playerColor, resultObject)\n        if(resultInt === 1) {\n            let currentBestWinGame = null\n            if(Number.isInteger(currentMoveDetails.bestWin)) {\n                currentBestWinGame = this.graph.pgnStats[currentMoveDetails.bestWin]\n            }\n            if(!currentBestWinGame || parseInt(opponentElo)>parseInt(this.getOpponentElo(playerColor, currentBestWinGame))) {\n                currentMoveDetails.bestWin = resultObject.index\n            }\n        }\n        if(resultInt === -1) {\n            let currentWorstLossGame = null\n            if(Number.isInteger(currentMoveDetails.worstLoss)) {\n                currentWorstLossGame = this.graph.pgnStats[currentMoveDetails.worstLoss]\n            }\n            if(!currentWorstLossGame || parseInt(opponentElo)<parseInt(this.getOpponentElo(playerColor, currentWorstLossGame))) {\n                currentMoveDetails.worstLoss = resultObject.index\n            }\n        }\n        let currentLastPlayedGame = null\n        if(Number.isInteger(currentMoveDetails.lastPlayed)) {\n            currentLastPlayedGame = this.graph.pgnStats[currentMoveDetails.lastPlayed]\n        }\n        if(!currentLastPlayedGame || \n            isDateMoreRecentThan(resultObject.date, currentLastPlayedGame.date)) {\n                currentMoveDetails.lastPlayed = resultObject.index\n        }\n        let currentLongestGame = null\n        if(Number.isInteger(currentMoveDetails.longestGame)) {\n            currentLongestGame = this.graph.pgnStats[currentMoveDetails.longestGame]\n        }\n        if(!currentLongestGame || \n            resultObject.numberOfPlys > currentLongestGame.numberOfPlys) {\n                currentMoveDetails.longestGame = resultObject.index\n        }\n\n        let currentShortestGame = null\n        if(Number.isInteger(currentMoveDetails.shortestGame)) {\n            currentShortestGame = this.graph.pgnStats[currentMoveDetails.shortestGame]\n        }\n        if(!currentShortestGame || \n            resultObject.numberOfPlys < currentShortestGame.numberOfPlys) {\n                currentMoveDetails.shortestGame = resultObject.index\n        }\n\n\n        currentMoveDetails.blackWins += blackWin\n        currentMoveDetails.whiteWins += whiteWin\n        currentMoveDetails.draws += draw\n        currentMoveDetails.totalOpponentElo += parseInt(opponentElo)\n        currentMoveDetails.hasData = true\n        return currentMoveDetails\n    }\n\n    getOpponentElo(playerColor, resultObject) {\n        if(playerColor === Constants.PLAYER_COLOR_WHITE) {\n            return resultObject.blackElo\n        }\n        return resultObject.whiteElo\n    }\n\n    gameResultsForFen(fullFen) {\n        let fen = simplifiedFen(fullFen)\n\n        var currNode = this.graph.nodes.get(fen)\n        if(currNode && currNode.gameResults) {\n            return currNode.gameResults.map((index)=>this.graph.pgnStats[index])\n        }\n        return null\n    }\n    movesForFen(fullFen) {\n        let fen = simplifiedFen(fullFen)\n\n        var currNode = this.graph.nodes.get(fen)\n        if(currNode && currNode.playedBy) {\n            return Array.from(Object.entries(currNode.playedBy)).map((entry)=> {\n                let chess = chessLogic(this.variant, fullFen)\n                let move = chess.move(entry[0], {sloppy: true})\n                let targetNodeDetails = this.getDetailsForFen(chess.fen())\n                return {\n                    orig:move.from,\n                    dest:move.to,\n                    level:this.levelFor(entry[1], currNode.playedByMax),\n                    san:move.san,\n                    details:targetNodeDetails,\n                    moveCount:entry[1]\n                }\n            })\n        }        \n        return null\n    }\n\n    levelFor(moveCount, maxCount){\n        if(maxCount <= 0 ||moveCount/maxCount > 0.8) {\n            return 3\n        }\n        if(moveCount/maxCount>0.3) {\n            return 2\n        }\n        return 1\n    }\n\n}\n\n\nclass Graph {\n    constructor(arrayEntries, pgnStats){\n        this.nodes = new Map()\n        this.book = new Map()\n        this.pgnStats = []\n        this.playerColor = ''\n        if(arrayEntries) {\n            arrayEntries.forEach((entry)=> {\n                this.nodes.set(entry[0],entry[1])\n            })\n        }\n        if(pgnStats) {\n            this.pgnStats = pgnStats\n        }\n    }\n}\n\nclass GraphNode {\n            playedByMax = 0 // used to keep track of how many times the most frequent move is played for ease of calculation later\n            //playedBy = {}\n            //gameResults = []\n}\n\nfunction emptyDetails() {\n    return {\n        hasData:false,\n//        count: 0,\n        blackWins: 0,\n        whiteWins: 0,\n        draws: 0,\n        totalOpponentElo: 0,\n        shortestGame:null,\n        longestGame:null,\n//        bestWin:null,\n//        bestWinGame:null,\n//        worstLoss:null,\n//        worstLossGame:null,\n        lastPlayed:null\n//        lastPlayedGame:null\n    }\n}\n","export const handleDarkMode = (darkMode) => {\n    const darkModeThemeIsCurrentlySet = document.body.classList.contains('dark-theme');\n\n\n    if (darkMode !== darkModeThemeIsCurrentlySet) {\n        toggleDarkModeStyles();\n    }\n};\n\nconst toggleDarkModeStyles = () => {\n    const navBar = document.querySelector('nav');\n    navBar.classList.toggle('navbar-light');\n    navBar.classList.toggle('navbar-dark');\n    navBar.classList.toggle('bg-dark');\n    navBar.classList.toggle('bg-light');\n\n    toggleLogo();\n\n    document.body.classList.toggle('dark-theme');\n};\n\nconst toggleLogo = () => {\n    const darkModeThemeIsCurrentlySet = document.body.classList.contains('dark-theme');\n    const logo = document.querySelector('nav.navbar img');\n\n    const logoSrc = darkModeThemeIsCurrentlySet ? '/opening-tree-logo.png' : '/opening-tree-logo-white.png';\n\n    logo.setAttribute('src', logoSrc);\n};\n","export const TIME_CONTROL_ULTRA_BULLET = \"ultraBullet\"\nexport const TIME_CONTROL_BULLET = \"bullet\"\nexport const TIME_CONTROL_BLITZ = \"blitz\"\nexport const TIME_CONTROL_RAPID = \"rapid\"\nexport const TIME_CONTROL_CLASSICAL = \"classical\"\nexport const TIME_CONTROL_CORRESPONDENCE = \"correspondence\"\nexport const TIME_CONTROL_DAILY = \"daily\"\nexport const FILTER_NAME_RATED = \"rated\"\nexport const FILTER_NAME_SELECTED_TIMEFRAME = \"selectedTimeframe\"\nexport const FILTER_NAME_DOWNLOAD_LIMIT = \"downloadLimit\"\nexport const FILTER_NAME_ELO_RANGE = \"eloRange\"\n\nexport const SITE_LICHESS = \"lichess\"\nexport const SITE_CHESS_DOT_COM = \"chesscom\"\nexport const SITE_PGN_FILE = \"pgnfile\"\nexport const SITE_EVENT_DB = \"eventdb\"\nexport const SITE_PLAYER_DB = \"playerdb\"\nexport const SITE_OPENING_TREE_FILE = \"opntfile\"\nexport const SITE_ONLINE_TOURNAMENTS = \"tournament\"\n\nexport const MAX_DOWNLOAD_LIMIT = 2000\nexport const MAX_ELO_RATING = 3000\n\nexport const EVENT_CATEGORY_PGN_LOADER = \"loader\"\nexport const EVENT_CATEGORY_OPENING_BOOK = \"openingBook\"\nexport const EVENT_CATEGORY_SETTINGS = \"settings\"\nexport const EVENT_CATEGORY_LICHESS_LOGIN = \"lichess\"\nexport const EVENT_CATEGORY_MAIN_ACTION = \"mainAction\"\nexport const EVENT_CATEGORY_SEGMENT = \"segment\"\nexport const EVENT_CATEGORY_MOVES_LIST = \"moves\"\nexport const EVENT_CATEGORY_CONTROLS = \"controls\"\nexport const EVENT_CATEGORY_NAVIGATOR = \"navigator\"\nexport const EVENT_CATEGORY_CHESSBOARD = \"chessboard\"\nexport const EVENT_CATEGORY_ERROR = \"error\"\nexport const EVENT_CATEGORY_MESSAGE_SHOWN = \"message\"\nexport const EVENT_CATEGORY_GLOBAL_HEADER = \"globalHeader\"\n\nexport const ROOT_FEN = \"rnbqkbnr/pppppppp/8/8/8/8/PPPPPPPP/RNBQKBNR w KQkq - 0 1\"\nexport const RACING_KINGS_ROOT_FEN=\"8/8/8/8/8/8/krbnNBRK/qrbnNBRQ w - - 0 1\"\n\nexport const PLAYER_COLOR_WHITE = 'white'\nexport const PLAYER_COLOR_BLACK = 'black'\n\nexport const LOADER_ANIMATION_DURATION_MS = 500\n\nexport const OPENING_TREE_EMAIL = 'feedback@openingtree.com'\nexport const OPENING_TREE_REDDIT = 'opening_tree'\nexport const OPENING_TREE_LICHESS = 'vannooz'\nexport const OPENING_TREE_CHESS_COM = 'vannooz'\nexport const OPENING_TREE_DISCORD = 'https://discord.gg/hCwKkN8'\n\nexport const OPENING_TREE_FILE_CURRENT_VERSION = 2\n\nexport const ERROR_ACTION_REPORT = 'report'\nexport const ERROR_ACTION_VISIT_OLD_SITE = 'visitOld'\nexport const ERROR_ACTION_NONE = 'noAction'\nexport const LICHESS_NOT_LOGGED_IN = 0;\nexport const LICHESS_STATE_PENDING = 1;\nexport const LICHESS_LOGGED_IN = 2;\nexport const LICHESS_FAILED_FETCH = 3;\n\nexport const ERROR_SEVERITY_ERROR = \"error\";\nexport const ERROR_SEVERITY_WARNING = \"warning\";\nexport const ERROR_SEVERITY_SUCCESS = \"success\";\n\nexport const VARIANT_STANDARD = \"standard\";\nexport const VARIANT_RACING_KINGS = \"racingkings\";\nexport const VARIANT_THREE_CHECK = \"threecheck\";\nexport const VARIANT_KING_OF_THE_HILL = \"kingofthehill\";\nexport const VARIANT_CRAZYHOUSE = \"crazyhouse\";\n\nexport const CHESS_COM_RULES_STANDARD = \"chess\";\nexport const CHESS_COM_RULES_THREE_CHECK = \"threeCheck\";\nexport const CHESS_COM_RULES_KING_OF_THE_HILL = \"kingofthehill\";\nexport const CHESS_COM_RULES_CRAZYHOUSE = \"crazyhouse\";\n\nexport const LICHESS_PERF_RACING_KINGS = \"racingKings\"\nexport const LICHESS_PERF_THREE_CHECK = \"threeCheck\"\nexport const LICHESS_PERF_KING_OF_THE_HILL = \"kingOfTheHill\"\nexport const LICHESS_PERF_CRAZYHOUSE = \"crazyhouse\"\nexport const LICHESS_PERF_STANDARD = \"standard\"\n\nexport const LICHESS_HEADER_RACING_KINGS = \"Racing Kings\"\nexport const LICHESS_HEADER_THREE_CHECK = \"Three-check\"\nexport const LICHESS_HEADER_KING_OF_THE_HILL = \"King of the Hill\"\nexport const LICHESS_HEADER_STANDARD = \"Standard\"\nexport const LICHESS_HEADER_CRAZYHOUSE = \"Crazyhouse\"\n\nexport const OPENING_BOOK_TYPE_OFF = 'off'\nexport const OPENING_BOOK_TYPE_MASTERS = 'master'\nexport const OPENING_BOOK_TYPE_LICHESS = 'lichess'\n\nexport const ALL_BOOK_RATINGS = ['1600','1800','2000','2200','2500']\n\nexport const DARK_MODE_COOKIE = 'dark-mode';\n","import zlib from 'zlib'\nimport {Buffer} from 'buffer'\nimport { saveAs } from 'file-saver';\n\nexport function serializeOpeningTree(treeData, filename, callback) {\n    let chunkedArray = chunk(treeData)\n    let deflatedChunks = []\n    //push version number 1 for later backward compatibility\n    deflatedChunks.push(packControlWord(0x1))\n    deflatedChunks.push(packControlWord(chunkedArray.length))\n    let remainingChunks = chunkedArray.length\n    let hasError = false;\n    chunkedArray.forEach((chunk)=>{\n        zlib.deflate(\n            new Buffer(JSON.stringify(chunk)), \n            (error,data)=>{\n                remainingChunks--\n                if(error) {\n                    hasError = true\n                }\n                deflatedChunks.push(packControlWord(data.byteLength))\n                deflatedChunks.push(data)\n                if(remainingChunks<=0) {\n                    if(hasError) {\n                        callback(\"Could not save file\")\n                        return\n                    }\n                    saveAs(new Blob(deflatedChunks, {type: \"application/octet-stream\"}), filename)\n                    callback(null, `Saved opening tree to file ${filename}`)\n                }\n            });\n        })\n}\n\nexport function deserializeOpeningTree(file, callback) {\n    let reader = new FileReader()\n    reader.onload = function(evt) {\n        let data = evt.target.result\n        let index = 0\n        let version = unpackControlWord(data.slice(index,index+8))\n        index = index + 8\n        if(version !== 0x1) {\n            callback(\"File is not an openingtree save file.\", null,\"Are you loading the correct file?\")\n            return\n        }\n        let numChunks = unpackControlWord(data.slice(index,index+8))\n        index = index + 8\n        if(!numChunks) {\n            callback(\"Input file not in correct format\", null)\n            return\n        }\n        getInflatedChunks(data, index, numChunks, callback)\n    };\n    reader.onerror = function(e) {\n        callback(\"Failed to read openingtree file\", null, `${e.target.error.name}:${e.target.error.message}`)\n    }\n    reader.readAsArrayBuffer(file)\n}\n\nfunction getInflatedChunks(data, startIndex, numChunks, callback) {\n    let index = startIndex\n    let deflatedChunks = []\n    let remainingChunks = numChunks\n    let hasError=false\n    let handleInflate = (error, data)=> {\n        remainingChunks--\n        if(error) {\n            console.log(error)\n            hasError=true\n        }\n        try {\n            deflatedChunks.push(JSON.parse(data))\n        } catch (e) {\n            console.log(e)\n            hasError=true\n        }\n        if(remainingChunks===0) {\n            if(hasError) {\n                callback(\"Input file seems corrupted\", null)\n            }\n            \n            callback(null, reconstructObjectFromChunks(deflatedChunks))\n        }\n        \n    }\n    while(numChunks>0) {\n        let chunkSize = unpackControlWord(data.slice(index,index+8))\n        index = index + 8\n        zlib.inflate(\n            Buffer.from(data,index,chunkSize), handleInflate)\n        index = index + chunkSize\n        numChunks--\n    }\n}\n\nfunction reconstructObjectFromChunks(deflatedChunks) {\n    let sortedChunks = deflatedChunks.sort((a,b)=>a.index-b.index)\n    let flattenedChunks = sortedChunks.slice(1).map(el=>el.chunk).flat()\n    let header = sortedChunks[0]\n    let arrays = []\n    let index = 0\n    let arraySizes = header.arraySizes || [flattenedChunks.length]\n    arraySizes.forEach((size)=>{\n        arrays.push(flattenedChunks.slice(index,index+size))\n        index+=size\n    })\n    return {\n        header:header.chunk,\n        arrays:arrays\n    }\n}\n\nfunction unpackControlWord(control) {\n    let view = new DataView(control)\n    if(view.getUint16(0)!==0x1337 || view.getUint16(6)!==0xC0D3) {\n        return null\n    }\n    return view.getUint32(2)\n}\n\nfunction packControlWord(control) {\n    var buffer = new ArrayBuffer(8); \n    var view = new DataView(buffer); \n    view.setUint16(0, 0x1337)\n    view.setUint32(2, control>>>0)\n    view.setUint16(6, 0xC0D3)\n    return buffer\n}\n\nfunction chunk(treeData) {\n    let chunk1 = {chunk:treeData.header, index:0, \n        arraySizes:treeData.arrays.map(arr=>arr.length)}\n    let chunks = [chunk1]\n    treeData.arrays.forEach((array)=>{\n        Array.prototype.push.apply(chunks, chunkArray(array, 1000, chunks.length));\n    })\n    return chunks\n}\n\nfunction chunkArray(array, chunkSize, startIndex) {\n    let chunkedArray=[]\n    \n    for (let i=0, chunkIndex=1; i<array.length; i+=chunkSize, chunkIndex++) {\n        chunkedArray.push({chunk:array.slice(i,i+chunkSize), index:startIndex+chunkIndex});\n    }\n    return chunkedArray\n}\n","import { withStyles } from '@material-ui/core/styles';\nimport MUIAccordion from '@material-ui/core/Accordion';\nimport React from 'react'\nimport { createSubObjectWithProperties } from '../../app/util'\nimport * as Constants from '../../app/Constants'\n\nexport const Accordion = withStyles({\n    root: {\n        border: '1px solid rgba(0, 0, 0, .125)',\n        boxShadow: 'none',\n        '&:not(:last-child)': {\n            borderBottom: 0,\n        },\n        '&:before': {\n            display: 'none',\n        },\n        '&$expanded': {\n            margin: 'auto',\n        },\n    },\n    expanded: {},\n})(MUIAccordion);\n\nexport function getNumberIcon(n) {\n    return <img alt={`step ${n}`} className = 'lowOpacity styledNumbers' src={`/images/styled-${n}.png`} height={24}/>\n}\n\nexport function advancedFilters(state) {\n    return createSubObjectWithProperties(state,\n        [Constants.TIME_CONTROL_ULTRA_BULLET, Constants.TIME_CONTROL_BULLET,\n        Constants.TIME_CONTROL_BLITZ, Constants.TIME_CONTROL_RAPID,\n        Constants.TIME_CONTROL_CORRESPONDENCE, Constants.TIME_CONTROL_DAILY,\n        Constants.TIME_CONTROL_CLASSICAL, Constants.FILTER_NAME_RATED,\n        Constants.FILTER_NAME_SELECTED_TIMEFRAME, Constants.FILTER_NAME_DOWNLOAD_LIMIT,\n        Constants.FILTER_NAME_ELO_RANGE])\n}\n\nexport function copyText(elementId) {\n    /* Get the text field */\n    var copyText = document.getElementById(elementId);\n    try {\n        /* Select the text field */\n        copyText.select();\n        copyText.setSelectionRange(0, 99999); /*For mobile devices*/\n\n        /* Copy the text inside the text field */\n        document.execCommand(\"copy\");\n        return true\n    } catch(e) {\n        return false\n    }\n}","import React from 'react'\nimport {getNumberIcon} from './Common'\nimport { AccordionDetails, AccordionSummary } from '@material-ui/core';\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport Divider from '@material-ui/core/Divider';\nimport AccordionActions from '@material-ui/core/AccordionActions';\nimport {Accordion} from './Common'\nimport * as Constants from '../../app/Constants'\nimport { Collapse } from 'reactstrap'\nimport { trackEvent } from '../../app/Analytics'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { Button as MaterialUIButton } from '@material-ui/core'\nimport { faCaretDown, faCaretUp} from '@fortawesome/free-solid-svg-icons'\nimport AdvancedFilters from './AdvancedFilters'\nimport {advancedFilters} from './Common'\nimport MuiCollapse from '@material-ui/core/Collapse';\nimport * as SitePolicy from '../../app/SitePolicy'\nimport { Radio, FormControlLabel, RadioGroup, FormHelperText, FormControl, FormLabel} from '@material-ui/core';\nimport deepEqual from 'deep-equal'\n\nexport default class User extends React.Component {\n\n    constructor(props) {\n        super(props)\n        this.state = {\n            playerColor: this.props.playerColor,\n            isAdvancedFiltersOpen: false\n        }\n        this.timeframeSteps=this.props.timeframeSteps\n        Object.assign(this.state, this.props.advancedFilters)\n        this.defaultAdvancedFilters = this.props.advancedFilters\n    }\n\n    toggleRated() {\n        if (this.state.rated === 'all') {\n            this.setState({ rated: 'rated' })\n        } else if (this.state.rated === 'rated') {\n            this.setState({ rated: 'casual' })\n        } else {\n            this.setState({ rated: 'all' })\n        }\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"AdvancedFilterChange\", \"rated\")\n    }\n    toggleState(property) {\n        return () => {\n            let newState = {}\n            newState[property] = !this.state[property]\n            this.setState(newState)\n            trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"ToggleAdvancedFilters\", this.state.site)\n        }\n    }\n    playerColorChange(event) {\n        let playerColor = event.target.value\n        this.setState({ playerColor: playerColor })\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"ColorChange\", playerColor)\n        if(!SitePolicy.isAdvancedFiltersEnabled(this.props.site)) {\n            setImmediate(this.setFilters.bind(this))\n        }\n}\n    handleTimeControlChange(event) {\n        this.setState({ [event.target.name]: event.target.checked });\n    }\n    handleTimeframeChange(event, newValue) {\n        this.setState({ [Constants.FILTER_NAME_SELECTED_TIMEFRAME]: newValue });\n    }\n    handleEloRangeChange(event, newValue) {\n        this.setState({ [Constants.FILTER_NAME_ELO_RANGE]: newValue });\n    }\n    handleDownloadLimitChange(event, newValue) {\n        this.setState({ [Constants.FILTER_NAME_DOWNLOAD_LIMIT]: newValue });\n    }\n\n    setFilters(){\n        if(!this.state.playerColor) {\n            this.setState({colorError:\"Please select a color\"})\n            return\n        }\n        this.setState({colorError:\"\", isAdvancedFiltersOpen:false})\n        this.props.filtersChange(this.state)\n    }\n    getSummary(isDisabled) {\n        if(this.props.playerColor && !isDisabled) {\n            return <span>\n                {getNumberIcon('done')}\n                Color: <b>{this.props.playerColor===Constants.PLAYER_COLOR_WHITE?\"White\":\"Black\"} </b>\n                {this.areAdvancedFiltersApplied()?<span className=\"smallText\">(Filters applied)</span>:null}</span>\n\n        }\n        return <span>{getNumberIcon(3)} Color and filters</span>\n    }\n    componentWillReceiveProps(newProps) {\n        this.setState({...newProps.advancedFilters, playerColor:newProps.playerColor})\n    }\n\n    areAdvancedFiltersApplied(){\n        for (let [key, value] of Object.entries(this.defaultAdvancedFilters)) {\n            if(this.props.advancedFilters[key]===value) {\n                continue\n            }\n            if(!deepEqual(this.props.advancedFilters[key], value)) {\n                return true\n            }\n        }\n        return false\n    }\n\n\n    render(){\n        let isDisabled = !SitePolicy.isFilterPanelEnabled(this.props.site, this.props.playerName, this.props.selectedNotablePlayer)\n        return <Accordion expanded={this.props.expandedPanel === 'filters'}\n            TransitionComponent={MuiCollapse}\n            TransitionProps={{timeout:Constants.LOADER_ANIMATION_DURATION_MS}}\n            onChange={this.props.handleExpansionChange}\n            disabled={isDisabled}>\n            <AccordionSummary expandIcon={<ExpandMoreIcon />}>\n                {this.getSummary(isDisabled)}\n            </AccordionSummary>\n            <AccordionDetails>\n                <div className=\"pgnloadersection\">\n                    <FormControl component=\"fieldset\" error={!!this.state.colorError}>\n                        <FormLabel component=\"legend\">Games where <b>{this.props.playerName}</b> is playing as:</FormLabel>\n                        <RadioGroup onChange={this.playerColorChange.bind(this)} value={this.state.playerColor}>\n                            <FormControlLabel className=\"whitelabel\" control={<Radio color=\"primary\" />} value={Constants.PLAYER_COLOR_WHITE} label={this.state.playerColor === Constants.PLAYER_COLOR_WHITE?<b>White</b>:\"White\"}/>\n                            <FormControlLabel className=\"blacklabel\" control={<Radio color=\"primary\" />} value={Constants.PLAYER_COLOR_BLACK} label={this.state.playerColor === Constants.PLAYER_COLOR_BLACK?<b>Black</b>:\"Black\"}/>\n                        </RadioGroup>\n                        <FormHelperText>{this.state.colorError}</FormHelperText>\n                    </FormControl>\n                </div>\n                {SitePolicy.isAdvancedFiltersEnabled(this.props.site)?<div className=\"pgnloadersection\"><span className=\"linkStyle\" onClick={this.toggleState('isAdvancedFiltersOpen').bind(this)}>Advanced filters <FontAwesomeIcon icon={this.state.isAdvancedFiltersOpen ? faCaretUp : faCaretDown} /></span>\n                    <Collapse isOpen={this.state.isAdvancedFiltersOpen}>\n                            <AdvancedFilters\n                                site={this.props.site}\n                                toggleRated={this.toggleRated.bind(this)}\n                                handleTimeControlChange={this.handleTimeControlChange.bind(this)}\n                                handleTimeframeChange={this.handleTimeframeChange.bind(this)}\n                                handleEloRangeChange={this.handleEloRangeChange.bind(this)}\n                                timeframeSteps={this.timeframeSteps}\n                                handleDownloadLimitChange={this.handleDownloadLimitChange.bind(this)}\n                                advancedFilters={advancedFilters(this.state)}\n                            />\n                    </Collapse>\n                </div>:null}\n            </AccordionDetails>\n            <Divider />\n            <AccordionActions>\n                <MaterialUIButton size=\"small\" color=\"primary\" onClick={this.setFilters.bind(this)}>Continue</MaterialUIButton>\n            </AccordionActions>\n        </Accordion>\n\n    }\n}","import * as Constants from '../app/Constants'\nimport * as Common from '../app/Common'\n\nexport function createSubObjectWithProperties(mainObject, properties) {\n    let subObject = {}\n    properties.forEach(property => {\n        subObject[property] = mainObject[property]\n    });\n    return subObject\n}\nexport function simplifiedFen(fen) {\n    let fenComponents = fen.split(' ')\n    if(fenComponents.length <=4) {\n        return fen\n    }\n    //exclude move and halfMove components\n    return `${fenComponents[0]} ${fenComponents[1]} ${fenComponents[2]}`\n}\n\nexport function getTimeControlsArray(site,timeControlState, selected) {\n    let allTimeControls = site === Constants.SITE_LICHESS ? \n        Common.LICHESS_TIME_CONTROLS : Common.CHESS_DOT_COM_TIME_CONTROLS\n    return allTimeControls.filter((timeControl)=>!!timeControlState[timeControl] === selected)\n}\nlet monthLabels = [\n    \"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"\n]\nexport function getTimeframeSteps() {\n    let steps = [{\n        year:2007,\n        value:0\n    }]\n    let value = 1;\n    let startYear = 2010\n    let currentYear = new Date().getFullYear()\n    let currentMonth = new Date().getMonth()\n    while(startYear < currentYear-1) {\n        steps.push({\n            toLongLabel:`${monthLabels[11]} ${startYear}`,\n            fromLongLabel:`${monthLabels[0]} ${startYear}`,\n            year:startYear,\n            value:value\n        })\n        startYear++\n        value++\n    }\n    for(let i=11;i>0;i--) {\n\n        let month = (currentMonth+12-i)%12\n        let year = month<currentMonth?currentYear:currentYear-1\n        steps.push({\n            fromLongLabel: `${monthLabels[month]} ${year}`,\n            toLongLabel: `${monthLabels[month]} ${year}`,\n            month:month,\n            year: year,\n            value:value\n        })\n        value++\n    }\n    steps.push({\n        month:12,\n        year: currentYear,\n        value:value\n    })\n    return steps\n}\n\n\nexport function simplifyCount(count){\n    if(count>=1000000){\n        return `${(count/1000000).toFixed(1)}M`\n    }        \n    if(count>=10000){\n        return `${Math.round(count/1000)}k`\n    }\n\n    return count\n}\n\nexport function getSelectedTimeFrameData(timeframe, timeframeSteps) {\n    let fromIndex = timeframe[0]\n    let toIndex = timeframe[1]\n    let fromTimeframe = timeframeSteps[fromIndex]\n    let toTimeframe = timeframeSteps[toIndex]\n    \n    if(fromIndex === timeframeSteps.length-1 && toIndex === timeframeSteps.length-1) {\n        let currentDate = new Date()\n        return {\n            label:\"Current month\",\n            fromMonth:currentDate.getMonth(),\n            fromYear:currentDate.getFullYear(),\n            fromTimeStamp:getTimeStampInfoFor(currentDate.getMonth(), currentDate.getFullYear(), \"min\")\n        }\n    }\n    if(fromIndex === 0 && toIndex === 0) {\n        return {label:\"Anytime\"}\n    }\n    if(fromIndex === 0 && toIndex === timeframeSteps.length-1) {\n        return {label:\"Anytime\"}\n    }\n    if(toIndex === timeframeSteps.length-1) {\n        let month = fromTimeframe.month ? fromTimeframe.month : 0\n        return {\n            label:`Since ${fromTimeframe.fromLongLabel}`,\n            fromYear: fromTimeframe.year,\n            fromMonth: month,\n            fromTimeStamp: getTimeStampInfoFor(month, fromTimeframe.year, \"min\")\n        }\n    }\n    if(fromIndex === 0) {\n        let month = toTimeframe.month ? toTimeframe.month : 11\n        return {\n            label:`Until ${toTimeframe.toLongLabel}`,\n            toYear: toTimeframe.year,\n            toMonth: month,\n            toTimeStamp: getTimeStampInfoFor(month, toTimeframe.year, \"max\")\n        }\n    }\n    let fromMonth = fromTimeframe.month ? fromTimeframe.month : 0\n    let toMonth = toTimeframe.month ? toTimeframe.month : 11\n    return {\n        label:`From ${fromTimeframe.fromLongLabel} to ${toTimeframe.toLongLabel}`,\n        fromYear: fromTimeframe.year,\n        fromMonth: fromMonth,\n        fromTimeStamp: getTimeStampInfoFor(fromMonth, fromTimeframe.year, \"min\"),\n        toYear: toTimeframe.year,\n        toMonth: toMonth,\n        toTimeStamp: getTimeStampInfoFor(toMonth, toTimeframe.year, \"max\")\n    }\n}\n\nfunction getTimeStampInfoFor(month, year, minOrMax) {\n    if(minOrMax === \"min\") {\n        return new Date(year, month).getTime()\n    } else {\n        return new Date(year,month,getDaysInMonth(year, month)).getTime()\n    }\n}\n\nfunction getDaysInMonth(year,month) {\n    return new Date(year, month + 1, 0).getDate();\n}\n\nexport function getPerformanceDetails(totalOpponentElo, averageElo, white, draws, black, playerColor) {\n    let totalGames = white + draws + black\n    let averageOpponentElo = totalOpponentElo?Math.round(totalOpponentElo/totalGames):null\n    let playerWins = playerColor === Constants.PLAYER_COLOR_BLACK?black:white\n    let playerLosses = playerColor !== Constants.PLAYER_COLOR_BLACK?black:white\n    let score = playerWins+(draws/2)\n    let scorePercentage = score*100/totalGames\n    let ratingChange = Common.DP_TABLE[Math.round(scorePercentage)]\n    let performanceRating = null\n    if(averageOpponentElo) {\n        performanceRating = averageOpponentElo+ratingChange\n    }\n    return {\n        results:`+${simplifyCount(playerWins)}-${simplifyCount(playerLosses)}=${simplifyCount(draws)}`,\n        performanceRating:performanceRating,\n        averageOpponentElo: averageOpponentElo,// avg elo rating of opponents only\n        averageElo:averageElo, // avg elo rating of all players\n        score:`${Number.isInteger(scorePercentage)?scorePercentage:scorePercentage.toFixed(1)}% for ${playerColor === Constants.PLAYER_COLOR_BLACK?'black':'white'}`,\n        ratingChange:`${ratingChange===0?'':(ratingChange>0?'+':'-')}${Math.abs(ratingChange)}`\n    }\n}\n\nexport function isOpponentEloInSelectedRange(elo, range) {\n    if(range[1]===Constants.MAX_ELO_RATING) {\n        return elo>=range[0]\n    }\n    return elo<=range[1] && elo>=range[0]\n}\n\nexport function isDateMoreRecentThan(date, than) {\n    // give priority to game which has a date\n    if(!than) {\n        return false\n    }\n    if(!date) {\n        return true\n    } \n    return new Date(date)>new Date(than)\n}","import React from 'react'\nimport * as Constants from '../../app/Constants'\nimport { trackEvent } from '../../app/Analytics'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { Button as MaterialUIButton } from '@material-ui/core'\nimport PGNReader from '../../app/PGNReaderWorker'\nimport { faList} from '@fortawesome/free-solid-svg-icons'\nimport GetApp from '@material-ui/icons/GetApp'\nimport Equalizer from '@material-ui/icons/Equalizer'\nimport Fade from '@material-ui/core/Fade'\nimport Save from '@material-ui/icons/Save';\nimport * as SitePolicy from '../../app/SitePolicy'\nimport {Tooltip} from '@material-ui/core'\nimport HourglassEmptyIcon from '@material-ui/icons/HourglassEmpty';\nimport {serializeOpeningTree, deserializeOpeningTree} from '../../app/OpeningTreeSerializer'\nimport {proxy} from 'comlink'\nimport streamsaver from 'streamsaver'\nimport cookieManager from '../../app/CookieManager'\n\nexport default class Actions extends React.Component {\n    constructor(props) {\n        super(props) \n        this.state = {\n            isGamesSubsectionOpen : false,\n            exportingInProgress : false\n        }\n        streamsaver.mitm = \"download/download-mitm.html\"\n        this.encoder = new TextEncoder()\n\n    }\n    unload = () => {\n        if (this.pgnReader) {\n            this.pgnReader.stopDownloading()\n        }\n    }\n    componentDidMount() {\n        window.addEventListener(\"beforeunload\", this.unload);\n    }\n\n    componentWillUnmount() {\n        window.removeEventListener(\"beforeunload\", this.unload);\n    }\n    importTreeClicked() {\n        this.setState({exportingInProgress:true})\n        trackEvent(Constants.EVENT_CATEGORY_MAIN_ACTION, \"LoadTree\", this.props.site, this.props.playerColor === Constants.PLAYER_COLOR_WHITE ? 1 : 0)\n        setImmediate(this.importOpeningTree.bind(this))\n    }\n    importOpeningTree() {\n        deserializeOpeningTree(this.props.files[0], \n            (err,data, subMesage)=> {\n                if(err) {\n                    this.props.showError(err, null, subMesage)\n                    this.setState({exportingInProgress:false})\n                    return\n                }\n                let success = this.props.importOpeningTreeObject(data)\n                this.setState({exportingInProgress:false})\n                if(success) {\n                    this.props.showInfo(\"Successfuly loaded openingtree\")                \n                }\n            })\n    }\n    exportTreeClicked() {\n        this.setState({exportingInProgress:true})\n        trackEvent(Constants.EVENT_CATEGORY_MAIN_ACTION, \"SaveTree\", this.props.site, this.props.playerColor === Constants.PLAYER_COLOR_WHITE ? 1 : 0)\n        setImmediate(this.exportOpeningTree.bind(this))\n    }\n    exportOpeningTree() {\n        serializeOpeningTree(this.props.exportOpeningTreeObject(), \n            SitePolicy.exportFileName(this.props.site, this.props.playerName, this.props.playerColor, null, \"tree\"), \n            (err, info) => {\n                if(err) {\n                    this.props.showError(err)                    \n                } else {\n                    this.props.showInfo(info)\n                }\n                this.setState({exportingInProgress:false})\n            })\n    }\n    abortDownloading() {\n        if(this.fileWriter) {\n            this.fileWriter.close()\n            this.fileWriter = null\n        }\n    }\n\n    getPgnString(game){\n        return `${Object.entries(game.headers).map(header=>`[${header[0]} \"${header[1]}\"]`).join(\"\\n\")}\n                \\n${game.moves.map((moveObject, index)=>{\n                    return `${index%2!==0?'':index/2+1+\".\"} ${moveObject.move}`\n                }).join(' ')} ${game.result}\\n\\n\\n`\n    }\n    downloadResponse(result, pendingDownloads) {\n        this.fileWriter.write(this.encoder.encode(result.map(game=>this.getPgnString(game)).join(\"\"))).then(()=>{\n            if(!pendingDownloads) {\n                this.abortDownloading()\n                return false\n            }\n        })\n        return true\n    }\n\n    readPgn(shouldDownloadToFile) {\n        if(shouldDownloadToFile) {\n            let fileStream =  streamsaver.createWriteStream(\n                SitePolicy.exportFileName(\n                    this.props.site, this.props.playerName, \n                    this.props.playerColor, this.props.selectedNotableEvent, \"pgn\"))\n            this.fileWriter = fileStream.getWriter()\n        }\n\n        new PGNReader(this.props.variant).then((readerInstance) => {\n            this.pgnReader = readerInstance\n            this.pgnReader.fetchPGNFromSite(this.props.playerName,\n                this.props.playerColor,\n                this.props.site,\n                this.props.selectedNotablePlayer,\n                this.props.selectedNotableEvent,\n                this.props.selectedOnlineTournament,\n                shouldDownloadToFile,\n                this.props.advancedFilters,\n                proxy(this.props.notify),\n                proxy(this.props.showError),\n                proxy(this.stopDownloading.bind(this)),\n                this.props.files,\n                proxy(this.downloadResponse.bind(this)),\n                this.getTokens())\n        })\n    }\n    \n    getTokens(){\n        return {\n            lichess:cookieManager.getLichessAccessToken()\n        }\n    }\n    download() {\n        this.readPgn(true)\n        trackEvent(Constants.EVENT_CATEGORY_MAIN_ACTION, \"Download\", this.props.site, this.props.playerColor === Constants.PLAYER_COLOR_WHITE ? 1 : 0)\n\n    }\n\n    getPlayerName() {\n        if(this.props.site === Constants.SITE_PLAYER_DB) {\n            return this.props.selectedNotablePlayer.name\n        }\n        return this.props.playerName\n    }\n    componentWillReceiveProps(newProps) {\n        if(newProps.gamesProcessed>0) {\n            this.setState({isGamesSubsectionOpen:true})\n        }\n    }\n\n    load() {\n        this.props.clear()\n        this.setState({ isGamesSubsectionOpen: true, loadedSite:this.props.site })\n        // set the player name and color in the global state\n        this.props.onChange(\"playerName\", this.props.playerName)\n        this.props.onChange(\"playerColor\", this.props.playerColor)\n        this.readPgn(false)\n        this.props.setDownloading(true)\n        trackEvent(Constants.EVENT_CATEGORY_MAIN_ACTION, \"Load\", this.props.site, this.props.playerColor === Constants.PLAYER_COLOR_WHITE ? 1 : 0)\n    }\n    stopDownloading() {\n        this.props.setDownloading(false)\n    }\n    stopDownloadingAction() {\n        this.stopDownloading()\n        trackEvent(Constants.EVENT_CATEGORY_MAIN_ACTION, \"StopDownloading\", this.props.site)\n    }\n    openingTreeLoadActions() {\n        return <div className=\"pgnloadersection\">\n            <MaterialUIButton\n            onClick={this.importTreeClicked.bind(this)}\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={this.state.exportingInProgress?<HourglassEmptyIcon/>:<GetApp/>}\n            className=\"mainButton\" disableElevation\n            disabled={this.state.exportingInProgress}\n            >\n                {this.state.exportingInProgress?\"Loading from file\":\"Load openingtree\"}\n        </MaterialUIButton></div>\n    }\n    regularActions() {\n        let downloadDisabledReason = SitePolicy.treeSaveDisabledReason(\n                                        this.state.loadedSite, \n                                        this.props.site,\n                                        this.props.gamesProcessed, \n                                        this.props.isDownloading)\n        return <div>\n        <div className=\"pgnloadersection\"><MaterialUIButton\n            onClick={this.load.bind(this)}\n            variant=\"contained\"\n            color=\"primary\"\n            startIcon={<Equalizer />}\n            className=\"mainButton\" disableElevation\n        >\n            Analyze games\n        </MaterialUIButton></div>\n        <div className=\"pgnloadersection\"><MaterialUIButton\n            onClick={this.download.bind(this)}\n            variant=\"contained\"\n            color=\"default\"\n            startIcon={<GetApp />}\n            className=\"mainButton\" disableElevation\n        >\n            Export as PGN\n        </MaterialUIButton></div>\n        {\n            <div className=\"pgnloadersection\"><Tooltip placement=\"top\" title={downloadDisabledReason||\"Save a .tree file locally for faster reload later\"}>\n                <span><MaterialUIButton\n                onClick={this.exportTreeClicked.bind(this)}\n                variant=\"contained\"\n                color=\"default\"\n                startIcon={this.state.exportingInProgress?<HourglassEmptyIcon/>:<Save/>}\n                className=\"mainButton\" disableElevation\n                disabled={!!downloadDisabledReason || this.state.exportingInProgress}\n                >\n                    {this.state.exportingInProgress?\"Saving to file\":\"Save .tree file\"}\n                </MaterialUIButton></span></Tooltip></div>\n            }\n        {\n            this.state.isGamesSubsectionOpen ?\n                <div>\n                    <div className=\"pgnloadersection\">\n                        {!this.props.playerColor?\"Games\":this.props.playerColor === Constants.PLAYER_COLOR_WHITE?\"White games\":\"Black games\"}{` loaded: ${this.props.gamesProcessed} `}{this.props.isDownloading ? <span className=\"stopDownloading\">[<span className=\"linkStyle\" onClick={this.stopDownloadingAction.bind(this)}><img alt=\"loading spinner\" src=\"./spinner.gif\" height=\"15\" />stop</span>]</span> : \"\"}\n                    </div>\n                    <div onClick={() => this.props.switchToMovesTab()} className=\"navLinkButton pgnloadersection\">\n                        <FontAwesomeIcon icon={faList} /> View Moves&gt;&gt;\n                </div>\n                </div>\n                : \"\"\n        }\n        </div>\n    }\n    mainComponent() {\n        if(this.props.site === Constants.SITE_OPENING_TREE_FILE) {\n            return this.openingTreeLoadActions()\n        }\n        return this.regularActions()\n    }\n    render(){\n        if(this.props.expandedPanel) {\n            return <Fade timeout={Constants.LOADER_ANIMATION_DURATION_MS*2}>\n            {this.mainComponent()}\n        </Fade>\n        }\n        return <Fade in timeout={Constants.LOADER_ANIMATION_DURATION_MS*3}>\n            {this.mainComponent()}\n        </Fade>\n    }\n}","import {wrap} from 'comlink'\n\nconst PGNReader = wrap(new Worker('./PGNReader.js', { type: 'module' }))\n\nexport default PGNReader","import * as Constants from '../app/Constants'\nimport {trackEvent} from '../app/Analytics'\nimport {copyText} from './loader/Common'\nimport {chessLogic} from '../app/chess/ChessLogic'\nimport OpeningGraph from '../app/OpeningGraph'\nimport {fetchBookMoves} from '../app/OpeningBook'\nimport CookieManager from '../app/CookieManager'\nimport { handleDarkMode } from './DarkMode';\n\nfunction turnColor() {\n    return fullTurnName(this.chess.turn())\n}\n\nfunction fullTurnName(shortName) {\n    return shortName === 'w' ? Constants.PLAYER_COLOR_WHITE : Constants.PLAYER_COLOR_BLACK\n}\n\nfunction playerColor() {\n    return this.state.settings.playerColor\n}\n\nfunction brushes() {\n    if(!this.playerColor() || this.playerColor() === this.turnColor()) {\n        return this.forBrushes\n    }\n    return this.againstBrushes\n}\nfunction highlightArrow(move) {\n    this.setState({highlightedMove:move})\n}\n\nfunction calcMovable() {\nconst dests = {}\n    this.chess.SQUARES.forEach(s => {\n        const ms = this.chess.moves({square: s, verbose: true})\n        if (ms.length) dests[s] = ms.map(m => m.to)\n    })\n    return {\n        free: false,\n        dests,\n        color: this.turnColor()\n    }\n}\n\nfunction orientation() {\n    return this.state.settings.orientation\n}\n\nfunction onMove(sanOrOrig, dest) {\n    let moveObj = null\n    if(dest) {\n        moveObj = { from:sanOrOrig, to:dest, promotion: 'q'}\n    } else {\n        moveObj = sanOrOrig\n    }\n    const chess = this.chess\n    let move = chess.move(moveObj)\n    this.setState({ fen: chess.fen(), lastMove: move})\n}\n\n\nfunction onMoveAction(sanOrOrig, dest) {\n    this.onMove(sanOrOrig, dest)\n    trackEvent(Constants.EVENT_CATEGORY_CHESSBOARD, \"Move\")\n}\n\nfunction navigateTo(fen, previousMove){\n    this.chess = chessLogic(this.state.variant, fen)\n    this.setState({fen:fen, lastMove:previousMove})\n}\nfunction updateProcessedGames(downloadLimit, n, parsedGame) {\n    let totalGamesProcessed = this.state.gamesProcessed+n\n    this.state.openingGraph.addPGN(parsedGame.pgnStats, parsedGame.parsedMoves,\n            parsedGame.latestFen,parsedGame.playerColor, this.state.variant)\n    this.setState({\n        gamesProcessed: totalGamesProcessed,\n        downloadingGames: (totalGamesProcessed<downloadLimit || downloadLimit>=Constants.MAX_DOWNLOAD_LIMIT)?this.state.downloadingGames:false\n    })\n    // continue to download games if\n    // 1. we have not reached download limit OR\n    //    there is no download limit set (downloadLimit>MAX condition)\n    // 2. user did not hit stop button\n    return (totalGamesProcessed < downloadLimit || downloadLimit>=Constants.MAX_DOWNLOAD_LIMIT)&& this.state.downloadingGames\n}\nfunction moveToShape(move) {\n    return {\n        orig:move.orig,\n                    dest: move.dest !== move.orig? move.dest:null,\n                    brush: this.brushes()[move.level]\n    }\n}\n\nfunction autoShapes(moves, highlightedMove) {\n    var shapes = []\n    if(highlightedMove) {\n        if(!highlightedMove.orig || !highlightedMove.dest) {\n            let chess = chessLogic(this.state.variant, this.state.fen)\n            let move = chess.move(highlightedMove.san)\n            highlightedMove.orig=move.from\n            highlightedMove.dest=move.to\n        }\n        highlightedMove.level = 0\n        shapes.push(this.moveToShape(highlightedMove))\n    }\n    if(moves) {\n        shapes = shapes.concat(moves.filter((m)=>{\n            if(!highlightedMove) {\n                return true\n            }\n            if (highlightedMove.orig === m.orig && highlightedMove.dest === m.dest) {\n                return false\n            }\n            return true\n        }).map(this.moveToShape.bind(this)))\n    }\n    return this.fillArray(shapes,  25)\n}\n\nfunction getPlayerMoves() {\n    if(!this.state.openingGraph.hasMoves) {\n        return null;\n    }\n    var moves = this.state.openingGraph.movesForFen(this.chess.fen())\n    return moves?moves.sort((a,b)=>b.moveCount-a.moveCount):[]\n}\n\nfunction gameResults() {\n    return this.state.openingGraph.gameResultsForFen(this.chess.fen())\n}\n\nfunction fillArray(arr, len) {\n    for (var i = arr.length; i < len; i++) {\n        arr.push({'orig':'i'+i, 'dest':'i'+(i+1), brush:this.brushes()[0]});\n    }\n    return arr;\n}\n\nfunction reset() {\n    this.chess = chessLogic(this.state.variant)\n    this.setState({fen: this.chess.fen(), lastMove:null})\n}\n\nfunction clear() {\n    this.state.openingGraph.clear()\n    this.state.gamesProcessed = 0\n    this.reset()\n}\n\nfunction settingsChange(name, value) {\n    if(name === 'movesSettings' || name === 'darkMode') {\n        let settingsToPersist = {}\n        settingsToPersist[name] = value\n        CookieManager.setSettingsCookie(settingsToPersist)\n        this.state.openingGraph.clearBookNodes()\n    }\n    let settings = this.state.settings\n    settings[name] = value;\n    this.setState({ settings });\n\n    if (name === 'darkMode') {\n        setImmediate(()=>handleDarkMode(value));\n    }\n}\n\nfunction launch(url) {\n    return () => {\n        window.open(url, \"_blank\")\n    }\n}\n\n\nfunction showError(message, trackingEvent, subMessage, action, severity) {\n    let errorActionText, errorAction\n    let messageSeverity = severity || Constants.ERROR_SEVERITY_ERROR\n    if(action === Constants.ERROR_ACTION_VISIT_OLD_SITE) {\n        errorActionText=\"Visit old site\"\n        errorAction = launch(\"https://www.openingtree.com/old\")\n    } else if(action !== Constants.ERROR_ACTION_NONE){\n        errorActionText=\"Report this\"\n        errorAction = this.toggleFeedback(true)\n    }\n    this.setState({message:message, subMessage:subMessage,\n        errorAction:errorAction, errorActionText:errorActionText,\n        messageSeverity:messageSeverity})\n    let eventName = messageSeverity+\"Shown\"\n    if(trackingEvent) {\n        eventName = eventName+\":\"+trackingEvent\n    }\n    trackEvent(Constants.EVENT_CATEGORY_MESSAGE_SHOWN,eventName, message)\n}\n\nfunction showInfo(message, trackingLabel) {\n    this.setState({message:message, messageSeverity:Constants.ERROR_SEVERITY_SUCCESS})\n    trackEvent(Constants.EVENT_CATEGORY_MESSAGE_SHOWN,\"infoShown\",\n        trackingLabel?trackingLabel:message)\n}\n\nfunction closeError() {\n    this.setState({message:'', subMessage:''})\n}\n\nfunction toggleFeedback(diagnosticsOpen) {\n    return () => {\n        let feedbackOpen = this.state.feedbackOpen\n        if(!feedbackOpen) {\n            trackEvent(Constants.EVENT_CATEGORY_GLOBAL_HEADER, \"feedbackOpen\")\n        }\n        this.closeError()\n        this.setState({feedbackOpen:!feedbackOpen,\n                diagnosticsDataOpen:diagnosticsOpen})\n    }\n}\n\nfunction setDownloading(val) {\n    this.setState({downloadingGames:val})\n}\n\nfunction toggleDiagnosticsData() {\n    this.setState({diagnosticsDataOpen:!this.state.diagnosticsDataOpen})\n}\n\nfunction copyDiagnostics() {\n    copyText(\"diagnosticsText\")\n    this.showInfo(\"Copied Diagnostics data\")\n}\n\n\nfunction importGameState(importState) {\n    let newSettings=importState.settings\n    //transfer objects from current settings that do not need serialization\n    newSettings.movesSettings=this.state.settings.movesSettings\n    this.setState({\n      settings:importState.settings,\n      openingGraph:importState.openingGraph,\n      gamesProcessed:importState.gamesProcessed,\n      variant:importState.variant?importState.variant:Constants.VARIANT_STANDARD\n    })\n    setImmediate(this.reset.bind(this))// setImmediate because we want the variant change to take effect\n  }\n  function getChessboardWidth(){\n    // getting nearest multiple of 8 because chessground has\n    // css alignment issues if board width is not a multple of 8\n\n    return `${nearestMultipleOf8(getChessboardWidthInternal())}px`\n  }\n  function nearestMultipleOf8(n){\n      while(n%8!==0) {\n          n++;\n      }\n      return n;\n  }\n  function getChessboardWidthInternal(){\n    // have to manually set the width to pixels instead of \"vw\" value\n    // this is because chessground component does not behave well with \"vw\" values\n    if (window.innerWidth<=768) {\n      return Math.round(window.innerWidth*95/100) //95vw\n    } else if ((window.innerWidth<=1424)) {\n      return Math.round(Math.min(window.innerWidth*48/100,Math.max(512,window.innerHeight-100))) // 40vw\n    } else {\n      return Math.round(Math.min(712,Math.max(512,window.innerHeight-100)))// innherHeight-100 to leave some space for header and footer\n    }\n\n  }\n\nfunction getDiagnosticsValue() {\n  return `--------------------\n  ${navigator.userAgent}\n  -------------------\n  ${JSON.stringify(this.state)}\n  -------------------\n  `\n}\nfunction getRedditLink() {\n    return `https://www.reddit.com/message/compose/?to=${Constants.OPENING_TREE_REDDIT}&subject=${this.getSubject()}&message=%0D%0A%0D%0A%0D%0A${this.getBody()}`\n}\n\nfunction getEmailLink() {\n    return `mailto:${Constants.OPENING_TREE_EMAIL}?subject=${this.getSubject()}&body=%0D%0A%0D%0A%0D%0A${this.getBody()}`\n}\n\nfunction getSubject() {\n    return this.state.diagnosticsDataOpen?\"Possible Openingtree bug\":\"Feedback on Openingtree\"\n}\nfunction getBody() {\n    return this.state.diagnosticsDataOpen?this.getDiagnosticsValue():\"\"\n}\n\nfunction variantChange(newVariant) {\n    this.setState({variant:newVariant, openingGraph:new OpeningGraph(newVariant)})\n    setImmediate(this.reset.bind(this))\n}\n\n// fetch the book moves openinggraph directly if they are available\n// otherwise\n//  1. fetch them from lichess\n//  2. store them in openinggraph\n//  3. update the component so that getBookMoves gets called again\nfunction getBookMoves() {\n    let moves = this.state.openingGraph.getBookNode(this.chess.fen())\n    if(this.state.settings.movesSettings.openingBookType === Constants.OPENING_BOOK_TYPE_OFF) {\n        return {fetch:'off'}\n    }\n\n    if(!moves) {\n        moves = this.forceFetchBookMoves()\n    }\n    return moves\n}\n\nfunction forceFetchBookMoves() {\n    let moves = fetchBookMoves(this.state.fen, this.state.variant, this.state.settings.movesSettings, (moves)=>{\n        this.state.openingGraph.addBookNode(this.chess.fen(), moves)\n        this.setState({update:this.state.update+1})\n    })\n    this.state.openingGraph.addBookNode(this.chess.fen(), moves)\n    setImmediate(()=>this.setState({update:this.state.update+1}))\n    return moves\n}\n\nfunction mergePlayerAndBookMoves(playerMovesToShow, bookMovesToShow) {\n    if(!playerMovesToShow) {\n        return\n    }\n    let bookMovesMap = createMap(bookMovesToShow.moves)\n    playerMovesToShow.forEach((move)=>{\n        let bookMove = bookMovesMap.get(move.san)\n        if(!bookMove) {\n            return\n        }\n        move.compareTo = {\n            bookScore:getCompareScores(bookMove),\n            userScore:getCompareScores(move),\n            values:getCompareToValues(bookMove)\n        }\n        bookMove.compareTo = {\n            bookScore:getCompareScores(bookMove),\n            userScore:getCompareScores(move),\n            values:getCompareToValues(move)\n        }\n    })\n}\nfunction getCompareScores(move){\n    return (move.details.whiteWins+move.details.draws/2)/move.details.count*100\n}\n\nfunction getCompareToValues(move) {\n    return [move.details.whiteWins/move.details.count*100,\n        (move.details.whiteWins+move.details.draws)/move.details.count*100]\n}\n\nfunction createMap(movesToShow){\n    let map = new Map()\n    if(!movesToShow) {\n        return map\n    }\n    movesToShow.forEach((move)=> {\n        map.set(move.san, move)\n    })\n    return map\n}\n\n\nfunction addStateManagement(obj){\n    obj.orientation  = orientation\n    obj.turnColor = turnColor\n    obj.calcMovable = calcMovable\n    obj.onMove = onMove\n    obj.onMoveAction = onMoveAction\n    obj.autoShapes = autoShapes\n    obj.updateProcessedGames = updateProcessedGames\n    obj.settingsChange = settingsChange\n    obj.reset = reset\n    obj.clear = clear\n    obj.navigateTo = navigateTo\n    obj.playerColor = playerColor\n    obj.fillArray = fillArray\n    obj.brushes = brushes\n    obj.moveToShape = moveToShape\n    obj.getPlayerMoves = getPlayerMoves\n    obj.gameResults = gameResults\n    obj.showError = showError\n    obj.showInfo = showInfo\n    obj.closeError = closeError\n    obj.toggleFeedback = toggleFeedback.bind(obj)\n    obj.setDownloading = setDownloading\n    obj.toggleDiagnosticsData = toggleDiagnosticsData.bind(obj)\n    obj.copyDiagnostics = copyDiagnostics.bind(obj)\n    obj.importGameState = importGameState\n    obj.getDiagnosticsValue = getDiagnosticsValue\n    obj.getChessboardWidth = getChessboardWidth\n    obj.getEmailLink = getEmailLink\n    obj.getSubject = getSubject\n    obj.getBody = getBody.bind(obj)\n    obj.getRedditLink = getRedditLink\n    obj.variantChange = variantChange\n    obj.getBookMoves = getBookMoves\n    obj.forceFetchBookMoves = forceFetchBookMoves\n    obj.mergePlayerAndBookMoves = mergePlayerAndBookMoves\n    obj.highlightArrow = highlightArrow\n}\n\nexport {addStateManagement}","import request from 'request'\nimport * as Common from './Common'\n\nexport function fetchBookMoves(fen, variant, bookSettings, callback) {\n    let ratings = bookSettings.openingBookRating\n    let speeds = bookSettings.openingBookTimeControls\n    let bookType = bookSettings.openingBookType\n    let url = `https://explorer.lichess.ovh/${bookType}?fen=${fen}&play=&variant=${Common.lichessPerf(variant)}${joinParams('ratings',ratings)}${joinParams('speeds',speeds)}`\n    request.get(url, (error, response) =>{\n        if(error) {\n            callback({fetch:\"failed\"})\n            return \n        }\n        try{\n            callback(JSON.parse(response.body))\n            return\n        } catch (e) {\n            console.log(e)\n        }\n        callback({fetch:\"failed\"})\n    })\n    return {fetch:\"pending\"}\n    //https://explorer.lichess.ovh/lichess?fen=rnbqkbnr%2Fpppppppp%2F8%2F8%2F8%2F8%2FPPPPPPPP%2FRNBQKBNR%20w%20KQkq%20-%200%201&play=&variant=kingOfTheHill&speeds%5B%5D=bullet&speeds%5B%5D=blitz&speeds%5B%5D=rapid&speeds%5B%5D=classical&ratings%5B%5D=1600&ratings%5B%5D=1800&ratings%5B%5D=2000&ratings%5B%5D=2200&ratings%5B%5D=2500\n\n}\n\nfunction joinParams(paramName, ratings) {\n    return ratings.map(r=>`&${paramName}[]=${r}`).join('')\n}\n","import * as Constants from '../../app/Constants'\nimport * as Common from '../../app/Common'\nimport {getTimeControlsArray} from '../../app/util'\n\nlet timeClasses = [\n    {\n        label:\"Fast time controls\",\n        selectedTimeControls:[\n            Constants.TIME_CONTROL_BULLET,\n            Constants.TIME_CONTROL_ULTRA_BULLET,\n            Constants.TIME_CONTROL_BLITZ\n        ],\n        unselectedTimeControls:[\n            Constants.TIME_CONTROL_RAPID,\n            Constants.TIME_CONTROL_CLASSICAL,\n            Constants.TIME_CONTROL_CORRESPONDENCE\n        ]\n    },\n    {\n        label:\"Slow time controls\",\n        selectedTimeControls:[\n            Constants.TIME_CONTROL_RAPID,\n            Constants.TIME_CONTROL_CLASSICAL,\n            Constants.TIME_CONTROL_CORRESPONDENCE\n        ],\n        unselectedTimeControls:[\n            Constants.TIME_CONTROL_BULLET,\n            Constants.TIME_CONTROL_ULTRA_BULLET,\n            Constants.TIME_CONTROL_BLITZ\n        ]\n    },\n    {\n        label:\"Reasonable time controls\",\n        selectedTimeControls:[\n            Constants.TIME_CONTROL_BLITZ,\n            Constants.TIME_CONTROL_RAPID,\n            Constants.TIME_CONTROL_CLASSICAL,\n            Constants.TIME_CONTROL_CORRESPONDENCE\n        ],\n        unselectedTimeControls:[\n            Constants.TIME_CONTROL_BULLET,\n            Constants.TIME_CONTROL_ULTRA_BULLET\n        ]\n    },\n    {\n        label:\"Exclude slow time controls\",\n        selectedTimeControls:[\n            Constants.TIME_CONTROL_BULLET,\n            Constants.TIME_CONTROL_ULTRA_BULLET,\n            Constants.TIME_CONTROL_BLITZ,\n            Constants.TIME_CONTROL_RAPID\n        ],\n        unselectedTimeControls:[\n            Constants.TIME_CONTROL_CLASSICAL,\n            Constants.TIME_CONTROL_CORRESPONDENCE\n        ]\n    }\n]\n        \n\n\nexport function timeControlLabel(site, timeControlState) {\n    let selectedTimeControls = getTimeControlsArray(site, timeControlState, true)\n    let unselectedTimeControls = getTimeControlsArray(site, timeControlState, false)\n    if(unselectedTimeControls.length === 0 || selectedTimeControls.length === 0) {\n        return \"All time controls\"\n    }\n    if(selectedTimeControls.length === 1) {\n        return Common.TIME_CONTROL_LABELS[selectedTimeControls[0]]\n    }\n    if(unselectedTimeControls.length === 1) {\n        return `All except ${Common.TIME_CONTROL_LABELS[unselectedTimeControls[0]]}`\n    }\n    if(selectedTimeControls.length === 2) {\n        return `${Common.TIME_CONTROL_LABELS[selectedTimeControls[0]]} and ${Common.TIME_CONTROL_LABELS[selectedTimeControls[1]]}`\n    }\n\n    return lichessTimeControlLabel(selectedTimeControls, unselectedTimeControls)\n}\n\nfunction lichessTimeControlLabel(selectedTimeControls, unselectedTimeControls) {\n    let timeClass = timeClasses.filter(\n        (timeClass) => {\n            return includesAll(unselectedTimeControls,timeClass.unselectedTimeControls)\n                && includesAll(selectedTimeControls,timeClass.selectedTimeControls)\n    })\n    if(timeClass.length) {\n        return timeClass[0].label\n    } \n    return selectedTimeControls.map(control=>Common.TIME_CONTROL_LABELS[control]).join(', ')\n}\n\nfunction includesAll(arr, subArray) {\n    return subArray.every(v => arr.includes(v));\n}\n","import {timeControlLabel} from './TimeControlLabels'\nimport {getSelectedTimeFrameData} from '../../app/util'\nimport * as Constants from '../../app/Constants'\n\nexport const getTimeControlLabel = timeControlLabel\n\nexport function getRatedLabel(rated) {\n    if(rated === 'all') {\n        return \"Rated and casual\"\n    } else if (rated === 'rated') {\n        return \"Rated only\"\n    } else if (rated === 'casual') {\n        return \"Casual only\"\n    }\n}\n\nexport function getWhenPlayedLabel(timeframe, timeframeSteps) {\n    return getSelectedTimeFrameData(timeframe, timeframeSteps).label\n}\n\nexport function getELORangeLabel(selectedEloRange) {\n    if(selectedEloRange[0] === 0 && selectedEloRange[1]===Constants.MAX_ELO_RATING) {\n        return \"All elo ratings\"\n    } else if (selectedEloRange[0] === 0) {\n        return `Below ${selectedEloRange[1]}`\n    } else if (selectedEloRange[1] === Constants.MAX_ELO_RATING) {\n        return `Above ${selectedEloRange[0]}`\n    } else {\n        return `Between ${selectedEloRange[0]} and ${selectedEloRange[1]}`\n    }\n}\nexport function getDownloadLimitLabel(downloadLimit) {\n    return downloadLimit>= Constants.MAX_DOWNLOAD_LIMIT?\"No limit\":`${downloadLimit} games`\n}\n","import FormControl from '@material-ui/core/FormControl';\nimport FormGroup from '@material-ui/core/FormGroup';\nimport Checkbox from '@material-ui/core/Checkbox';\nimport React from 'react'\nimport {Collapse, Container, Row, Col} from 'reactstrap'\nimport { FormControlLabel,Slider } from '@material-ui/core';\nimport * as Constants from '../../app/Constants'\nimport {getTimeControlLabel, getELORangeLabel, getRatedLabel, getWhenPlayedLabel, getDownloadLimitLabel} from './FilterLabels'\nimport * as Common from '../../app/Common'\nimport {trackEvent} from '../../app/Analytics'\n\nexport default class AdvancedFilters extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            currentlyOpenAdvancedFilter:'',\n        }\n        this.timeframeMarks=[\n            {\n                value:0,\n                label:\"Big bang\"\n            }, {\n                value:props.timeframeSteps.length-1,\n                label:\"Now\"\n            }]\n        this.downloadLimitMarks=[\n            {\n                value:0,\n                label:\"0\"\n            }, {\n                value:Constants.MAX_DOWNLOAD_LIMIT,\n                label:`No limit`\n            }]\n        this.eloRangeMarks=[\n            {\n                value:0,\n                label:\"0\"\n            }, {\n                value:Constants.MAX_ELO_RATING,\n                label:`No limit`\n            }]\n    \n    }\n    setCurrentlyOpenAdvancedFilter(filterName) {\n        return () => {\n            if(this.state.currentlyOpenAdvancedFilter === filterName) {\n                //close if already open\n                filterName = ''\n            }\n            this.setState({currentlyOpenAdvancedFilter:filterName})\n            trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"AdvancedFilterChange\", filterName)\n        }\n    }\n\n    getFilters(site){\n        return <div>\n            {this.subSectionComponent('Mode', getRatedLabel(this.props.advancedFilters.rated), this.props.toggleRated)}\n            {this.subSectionComponent('Time control', getTimeControlLabel(this.props.site, this.props.advancedFilters), \n                    this.setCurrentlyOpenAdvancedFilter('timeControl').bind(this),\n                <Collapse isOpen={this.state.currentlyOpenAdvancedFilter === 'timeControl'}>\n                    {this.getTimeControlFilters(site, 4)}\n                </Collapse>\n            )}\n            {this.subSectionComponent('When played', getWhenPlayedLabel(this.props.advancedFilters[Constants.FILTER_NAME_SELECTED_TIMEFRAME], this.props.timeframeSteps), \n                this.setCurrentlyOpenAdvancedFilter('whenPlayed').bind(this),\n                <Collapse isOpen={this.state.currentlyOpenAdvancedFilter === 'whenPlayed'}>\n                    {this.getTimeFrameFilters()}\n                </Collapse>)}\n            {this.subSectionComponent('Opponent elo range', getELORangeLabel(this.props.advancedFilters[Constants.FILTER_NAME_ELO_RANGE]), \n                this.setCurrentlyOpenAdvancedFilter('eloRange').bind(this),\n                <Collapse isOpen={this.state.currentlyOpenAdvancedFilter === 'eloRange'}>\n                    {this.getEloRangeFilters()}\n                </Collapse>)}\n            {this.subSectionComponent('Download limit', getDownloadLimitLabel(this.props.advancedFilters[Constants.FILTER_NAME_DOWNLOAD_LIMIT]), \n                this.setCurrentlyOpenAdvancedFilter('downloadLimit').bind(this),\n                <Collapse isOpen={this.state.currentlyOpenAdvancedFilter === 'downloadLimit'}>\n                    {this.getDownloadLimitFilters()}\n                </Collapse>)}\n      </div>\n    }\n\n    getDownloadLimitFilters() {\n        return <Slider className = \"sliderCustom\"\n            value={this.props.advancedFilters[Constants.FILTER_NAME_DOWNLOAD_LIMIT]}\n            onChange={this.props.handleDownloadLimitChange}\n            valueLabelDisplay=\"auto\"\n            valueLabelFormat={(val)=>val>=Constants.MAX_DOWNLOAD_LIMIT?\"All\":val}\n            step={100}\n            min={0}\n            marks={this.downloadLimitMarks}\n            max={Constants.MAX_DOWNLOAD_LIMIT}\n        />\n    }\n\n    getTimeFrameFilters() {\n        return <Slider className = \"sliderCustom\"\n            value={this.props.advancedFilters[Constants.FILTER_NAME_SELECTED_TIMEFRAME]}\n            onChange={this.props.handleTimeframeChange}\n            valueLabelDisplay=\"off\"\n            valueLabelFormat={(val)=>this.props.timeframeSteps[val].label}\n            step={1}\n            marks={this.timeframeMarks}\n            min={0}\n            max={this.props.timeframeSteps.length-1}\n        />\n    }\n\n    getEloRangeFilters() {\n        return <Slider className = \"sliderCustom\"\n            value={this.props.advancedFilters[Constants.FILTER_NAME_ELO_RANGE]}\n            onChange={this.props.handleEloRangeChange}\n            valueLabelDisplay=\"off\"\n            marks={this.eloRangeMarks}\n            min={0}\n            max={Constants.MAX_ELO_RATING}\n        />\n    }\n\n    getTimeControlFilters(site){\n        let firstRow = null, middleRow = null, lastRow = null\n        let colWidth = null\n        if(site === 'lichess') {\n            firstRow = [Constants.TIME_CONTROL_BULLET,\n                        Constants.TIME_CONTROL_ULTRA_BULLET]\n            middleRow = [Constants.TIME_CONTROL_BLITZ,\n                        Constants.TIME_CONTROL_CLASSICAL]\n            lastRow = [Constants.TIME_CONTROL_RAPID,\n                        Constants.TIME_CONTROL_CORRESPONDENCE]\n            colWidth = '4'\n                    \n        } else {\n            firstRow = [Constants.TIME_CONTROL_BULLET,\n                        Constants.TIME_CONTROL_BLITZ]\n            lastRow = [Constants.TIME_CONTROL_RAPID, \n                        Constants.TIME_CONTROL_DAILY]\n            colWidth = '6'\n        }\n        return <FormControl><FormGroup><Container>\n            {this.getTimeControlFilterRow(firstRow,colWidth,'first')}\n            {middleRow?this.getTimeControlFilterRow(middleRow,colWidth,'middle'):null}\n            {this.getTimeControlFilterRow(lastRow,colWidth,'last')}\n          </Container>\n        </FormGroup></FormControl>\n      \n    }\n\n    getTimeControlFilterRow(controls,firstColumnWidth, position){\n        let clsName = 'topBottomNegativeMargin'\n        if(position === \"first\") {\n            clsName = 'bottomNegativeMargin'\n        } else if (position === \"last\") {\n            clsName = 'topNegativeMargin'\n        } \n        return <Row className={clsName}>\n            {controls.map((control) => \n            <Col sm={firstColumnWidth} key={`ctrl${control}`}>\n                \n            <FormControlLabel className = \"nomargin\"\n                control={<Checkbox checked={this.props.advancedFilters[control]} color=\"primary\" \n                onChange={this.props.handleTimeControlChange} name={control} />}\n                label={Common.TIME_CONTROL_LABELS[control]}\n          /></Col>)}</Row>\n    }\n\n    subSectionComponent(title, label, changeCallback, children) {\n        return <div className=\"pgnloadersection\">{title}: <span className=\"smallText\">[<span className=\"linkStyle\" onClick={changeCallback}>change</span>]</span>\n        <div><b>{label}</b></div>{children}\n        </div>\n    }\n\n\n    render() {\n        return this.getFilters(this.props.site)\n    }\n\n}","module.exports = __webpack_public_path__ + \"static/js/0.cd943d1a.chunk.worker.js\"","import Cookies from 'js-cookie'\n\nclass CookieManager {\n    getLichessAccessToken() {\n        return Cookies.get('at')\n    }\n\n    deleteLichessAccessToken() {\n        Cookies.remove('at', { path: '/', domain:'www.openingtree.com' })\n    }\n\n    setSettingsCookie(settings) {\n        Cookies.set('set',JSON.stringify(settings))\n    }\n\n    getSettingsCookie() {\n        let settingsCookie = null\n        try{\n            settingsCookie = Cookies.get('set')\n        } catch (e) {\n            console.log(e)\n            return null\n        }\n        if(!settingsCookie) {\n            return null\n        }\n        return JSON.parse(settingsCookie)\n    }\n\n    currentVisit = null\n\n    getVisitInfo(){\n        if(this.currentVisit) {\n            return this.currentVisit\n        }\n        // executes when page loads\n        let lastVisitCookie = Cookies.get('lst')\n        let visitsCookie = Cookies.get('vcnt')\n        let firstVisitCookie = Cookies.get('fst')\n        let lastVisit = lastVisitCookie?parseInt(lastVisitCookie):null\n        let timesVisited = visitsCookie?parseInt(visitsCookie):0\n        let firstVisit = firstVisitCookie?parseInt(firstVisitCookie):null\n        let currDate = new Date().getTime()\n        this.currentVisit = {\n            firstVisit:firstVisit,\n            lastVisit: lastVisit,\n            currentVisit: currDate,\n            numVisits: timesVisited,\n        }\n        if(lastVisit === null || currDate-lastVisit>1000*60*60*24){\n            // increment count if visit in more than an day\n            Cookies.set('lst', currDate);\n            Cookies.set('vcnt', timesVisited+1)\n        }\n        if(firstVisit === null) {\n            Cookies.set('fst', currDate);\n        }\n        return this.currentVisit\n    }\n\n}\n\nexport default new CookieManager();","import * as Constants from './Constants'\n\nexport const LICHESS_TIME_CONTROLS = [\n    Constants.TIME_CONTROL_ULTRA_BULLET,\n    Constants.TIME_CONTROL_BULLET,\n    Constants.TIME_CONTROL_BLITZ,\n    Constants.TIME_CONTROL_RAPID,\n    Constants.TIME_CONTROL_CLASSICAL,\n    Constants.TIME_CONTROL_CORRESPONDENCE\n]\nexport const CHESS_DOT_COM_TIME_CONTROLS = [\n    Constants.TIME_CONTROL_BULLET,\n    Constants.TIME_CONTROL_BLITZ,\n    Constants.TIME_CONTROL_RAPID,\n    Constants.TIME_CONTROL_DAILY,\n]\n\nexport const TIME_CONTROL_LABELS = {\n    [Constants.TIME_CONTROL_ULTRA_BULLET]: \"Ultrabullet\",\n    [Constants.TIME_CONTROL_BULLET]: \"Bullet\",\n    [Constants.TIME_CONTROL_BLITZ]: \"Blitz\",\n    [Constants.TIME_CONTROL_RAPID]: \"Rapid\",\n    [Constants.TIME_CONTROL_CLASSICAL]: \"Classical\",\n    [Constants.TIME_CONTROL_CORRESPONDENCE]: \"Correspondence\",\n    [Constants.TIME_CONTROL_DAILY]: \"Daily\"\n}\n\nexport function trimString(str) {\n    return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nexport function lichessVariantHeader(variant) {\n    if(variant === Constants.VARIANT_RACING_KINGS) {\n        return Constants.LICHESS_HEADER_RACING_KINGS\n    } else if(variant === Constants.VARIANT_KING_OF_THE_HILL) {\n        return Constants.LICHESS_HEADER_KING_OF_THE_HILL\n    } else if(variant === Constants.VARIANT_THREE_CHECK) {\n        return Constants.LICHESS_HEADER_THREE_CHECK\n    } else if(variant === Constants.VARIANT_CRAZYHOUSE) {\n        return Constants.LICHESS_HEADER_CRAZYHOUSE\n    }\n    return Constants.LICHESS_HEADER_STANDARD\n}\nexport function lichessPerf(variant) {\n    if (variant === Constants.VARIANT_KING_OF_THE_HILL) {\n        return Constants.LICHESS_PERF_KING_OF_THE_HILL\n    } else if (variant === Constants.VARIANT_RACING_KINGS) {\n        return Constants.LICHESS_PERF_RACING_KINGS\n    } else if (variant === Constants.VARIANT_THREE_CHECK) {\n        return Constants.LICHESS_PERF_THREE_CHECK\n    } else if (variant === Constants.VARIANT_CRAZYHOUSE) {\n        return Constants.LICHESS_PERF_CRAZYHOUSE\n    } else if (variant === Constants.VARIANT_STANDARD) {\n        return Constants.LICHESS_PERF_STANDARD\n    }\n}\nexport function chessDotComRules(variant) {\n    if(variant === Constants.VARIANT_KING_OF_THE_HILL) {\n        return Constants.CHESS_COM_RULES_KING_OF_THE_HILL\n    } else if(variant === Constants.VARIANT_THREE_CHECK) {\n        return Constants.CHESS_COM_RULES_THREE_CHECK\n    } else if(variant === Constants.VARIANT_CRAZYHOUSE) {\n        return Constants.CHESS_COM_RULES_CRAZYHOUSE\n    }\n    return Constants.CHESS_COM_RULES_STANDARD\n}\n\n\nexport const DP_TABLE = {\n    \"100\":800,   \"99\":677,    \"98\":589,    \"97\":538,\n    \"96\":501,    \"95\":470,    \"94\":444,    \"93\":422,\n    \"92\":401,    \"91\":383,    \"90\":366,    \"89\":351,\n    \"88\":336,    \"87\":322,    \"86\":309,    \"85\":296,\n    \"84\":284,    \"83\":273,    \"82\":262,    \"81\":251,\n    \"80\":240,    \"79\":230,    \"78\":220,    \"77\":211,\n    \"76\":202,    \"75\":193,    \"74\":184,    \"73\":175,\n    \"72\":166,    \"71\":158,    \"70\":149,    \"69\":141,\n    \"68\":133,    \"67\":125,    \"66\":117,    \"65\":110,\n    \"64\":102,    \"63\":95,     \"62\":87,     \"61\":80,\n    \"60\":72,     \"59\":65,     \"58\":57,     \"57\":50,\n    \"56\":43,     \"55\":36,     \"54\":29,     \"53\":21,\n    \"52\":14,     \"51\":7,      \"50\":0,      \"49\":-7,\n    \"48\":-14,    \"47\":-21,    \"46\":-29,    \"45\":-36,\n    \"44\":-43,    \"43\":-50,    \"42\":-57,    \"41\":-65,\n    \"40\":-72,    \"39\":-80,    \"38\":-87,    \"37\":-95,\n    \"36\":-102,   \"35\":-110,   \"34\":-117,   \"33\":-125,\n    \"32\":-133,   \"31\":-141,   \"30\":-149,   \"29\":-158,\n    \"28\":-166,   \"27\":-175,   \"26\":-184,   \"25\":-193,\n    \"24\":-202,   \"23\":-211,   \"22\":-220,   \"21\":-230,\n    \"20\":-240,   \"19\":-251,   \"18\":-262,   \"17\":-273,\n    \"16\":-284,   \"15\":-296,   \"14\":-309,   \"13\":-322,\n    \"12\":-336,   \"11\":-351,   \"10\":-366,   \"9\":-383,\n    \"8\":-401,    \"7\":-422,    \"6\":-444,    \"5\":-470,\n    \"4\":-501,    \"3\":-538,    \"2\":-589,    \"1\":-677,\n    \"0\":-800,\n}","import Chess from 'chess.js'\n\nexport default class RacingKingsChess {\n    constructor(fen){\n        this.chess = new Chess(fen);\n        this.SQUARES = this.chess.SQUARES\n    }\n    fen(){\n        return this.chess.fen()\n    }\n    turn() {\n        return this.chess.turn()\n    }\n    moves(options) {\n        // checks are not allowed in racing kings \n        // so remove moves that cause a check\n        return this.chess.moves(options).filter((move)=>{\n            let san = move.san || move\n            return !san.endsWith(\"+\") && !san.endsWith(\"#\")\n        })\n    }\n\n    move(moveObject, options) {\n        if(typeof moveObject !== \"string\") {\n            return this.chess.move(moveObject, options)\n        }\n        \n        if (moveObject.endsWith('#')) {\n            // a move ending in checkmate in racing kings will not \n            // be a checkmate under standard rules. so remove the # at the end \n            // to make it pass as a standard notation \n            moveObject = moveObject.substring(0, moveObject.length - 1);\n        } \n        let move = this.chess.move(moveObject, options)\n        if(move) {\n            return move\n        }\n        let disambiguatedMove = disambiguate(moveObject, this.moves())\n        if(!disambiguatedMove) {\n            // disambiguation failed\n            return move\n        }\n        // making this move failed so try disambiguating\n        return this.chess.move(disambiguatedMove, options)\n    }\n\n}\n\n// this is needed because in certain positions, while a disambiguating notation is needed \n// in standard chess, it is not needed in racing kings. \n// for example in this position \"1q4R1/1kN2Q2/8/5K2/8/4Nn2/8/b7 w - - 1 21\"\n// Move Nd5 is ambiguous in standard chess but is clear in Racing kings\n// because Ncd5 will lead to check\n\n// The way this function works is by actually finding the disambiguated move Ned5\n// to pass to the chess.js library. Since the move Ncd5 will end with a check (+) \n// it will fail the filter below\nfunction disambiguate(problematicMove, potentialMoves) {\n    let filteredMoves = potentialMoves.filter((potentialMove)=>{\n        if(problematicMove.charAt(0) !== potentialMove.charAt(0)) {\n            return false;\n        }\n        return problematicMove.slice(-2) === potentialMove.slice(-2)\n    })\n    if(filteredMoves.length !== 1) {\n        return null\n    }\n    return filteredMoves[0]\n}","import Chess from 'chess.js'\n\nexport default class CrazyhouseChess {\n    constructor(fen){\n        this.chess = new Chess(fen);\n        this.SQUARES = this.chess.SQUARES\n    }\n    fen(){\n        return this.chess.fen()\n    }\n    turn() {\n        return this.chess.turn()\n    }\n    moves(options) {\n        return this.chess.moves(options)\n    }\n\n    move(moveObject, options) {\n        let move = this.chess.move(moveObject, options)\n        if(move) {\n            return move\n        }\n        if(typeof moveObject === \"string\") {\n            return this.moveSan(moveObject)\n        } else {\n            return this.moveSan(moveObject.san)\n        }\n    }\n\n    moveSan(san) {\n        if(san.includes('@')){\n            let locationOfAt = san.indexOf('@')\n            let piece = ''\n            if(locationOfAt === 0) {\n                piece = this.chess.PAWN\n            } else {\n                piece = san.charAt(0).toLowerCase()\n            }\n            let location = san.slice(locationOfAt+1,locationOfAt+3)\n            let success = this.chess.put({type:piece, color:this.turn()}, location)\n            if(!success) {\n                return null\n            }\n            let color = this.turn()\n\n            this.toggleTurn()\n            return {\n                color: color,\n                from:location,\n                to:location,\n                san:san\n            }\n        }\n        return null\n    }\n    toggleTurn() {\n        var tokens = this.chess.fen().split(' ');\n        // switch the color\n        tokens[1] = tokens[1] === 'b'? 'w' : 'b'\n        // remove en passent\n        tokens[3] = '-'\n        this.chess.load(tokens.join(' '));\n    }\n    \n}\n\n","import * as Constants from '../Constants'\nimport Chess from 'chess.js'\nimport RacingKingsChess from './RacingKingsChess'\nimport CrazyhouseChess from './CrazyhouseChess'\n\nexport function chessLogic(variant, fen) {\n    if(!fen) {\n        fen = rootFen(variant)\n    }\n    if(variant === Constants.VARIANT_RACING_KINGS) {\n        return new RacingKingsChess(fen)\n    }\n    if(variant === Constants.VARIANT_CRAZYHOUSE) {\n        return new CrazyhouseChess(fen)\n    }\n    return new Chess(fen)\n}\n\nexport function rootFen(variant) {\n    if(variant === Constants.VARIANT_RACING_KINGS) {\n        return Constants.RACING_KINGS_ROOT_FEN\n    }\n    return Constants.ROOT_FEN\n}","import cookieManager from './CookieManager'\n\nclass UserProfile {\n    userProfile = null\n    getUserProfile(){\n        if(this.userProfile !== null) {\n            return this.userProfile\n        }\n        let visitInfo = cookieManager.getVisitInfo();\n        let userType = null\n        if(visitInfo.numVisits === 0) {\n            userType = USER_PROFILE_FIRST_TIME_USER\n        } else if(visitInfo.numVisits < 6) {\n            userType = USER_PROFILE_NEW_USER\n        } else if (visitInfo.numVisits < 12) {\n            userType = USER_PROFILE_OCCAISONAL_USER\n        } else if (visitInfo.currentVisit - visitInfo.firstVisit > 1000*60*60*24*30\n            && visitInfo.currentVisit - visitInfo.lastVisit < 1000*60*60*24*7) {\n            // power user classified if :\n            // 1. has more than 10 visits total\n            // 2. first visited more than a month ago \n            // 3. last visited within the past week\n            userType = USER_PROFILE_POWER_USER\n        } else {\n            userType = USER_PROFILE_FREQUENT_USER\n        }\n        this.userProfile = {\n            userType:userType,\n            numVisits:visitInfo.numVisits\n        }\n        return this.userProfile\n    }\n}\nexport const USER_PROFILE_FIRST_TIME_USER = 1\nexport const USER_PROFILE_NEW_USER = 2\nexport const USER_PROFILE_OCCAISONAL_USER = 3\nexport const USER_PROFILE_FREQUENT_USER = 4\nexport const USER_PROFILE_POWER_USER = 5\n\nexport default new UserProfile();","import * as ChessLogic from './chess/ChessLogic'\n\nexport default class OpeningManager {\n    plys = []\n    currentIndex = 0\n    constructor(variant) {\n        this.plys = [{pgn:'', fen:ChessLogic.rootFen(variant), move:null}]\n        this.currentIndex = 0\n    }\n    addPly(fen,move) {\n        if(this.currentIndex<this.plys.length-1 && this.plys[this.currentIndex+1].move.san === move.san) {\n            this.moveForward()\n            return\n        }\n        this.plys = this.plys.slice(0,this.currentIndex+1)\n        this.plys.push({\n            pgnAsList:this.pgnAsList(move.san),\n            fen: fen,\n            move: move\n        })\n        this.currentIndex++;\n        return this.plys[this.currentIndex]\n    }\n\n    pgnAsList(san) {\n        let pgnSoFar = this.pgnListSoFar()\n        let pgnList\n        if (!pgnSoFar) {\n            pgnList = []\n        } else {\n            pgnList = [...pgnSoFar]\n        }\n        let numPlys = this.plys.length\n        if(numPlys%2 !== 0) {\n            pgnList.push({\n                moveNumber:pgnList.length+1,\n                whitePly:san,\n                blackPly:''\n            })\n        } else {\n            let currMove = pgnList[pgnList.length-1]\n            currMove.blackPly = san\n            pgnList[pgnList.length-1] = currMove\n        }\n        return pgnList\n    }\n\n    currentMove() {\n        return Math.floor((this.currentIndex-1)/2);\n    }\n\n    pgnListSoFar(){\n        return this.plys[this.plys.length-1].pgnAsList\n    }\n\n    fen(){\n        return this.plys[this.currentIndex].fen\n    }\n\n    moveForward() {\n        return this.moveTo(this.currentIndex+1)\n    }\n    moveBack() {\n        return this.moveTo(this.currentIndex-1)\n    }\n    moveTo(index) {\n        if(index>=0 && index<this.plys.length) {\n            this.currentIndex = index\n        }\n        return this.plys[this.currentIndex]\n    }\n\n}","import React from 'react'\nimport ChessEcoCodes from 'chess-eco-codes'\nimport OpeningManager from '../app/OpeningManager'\nimport {Container, Row, Col, Button} from 'reactstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faStepForward, faStepBackward } from '@fortawesome/free-solid-svg-icons'\nimport * as Constants from '../app/Constants'\nimport {trackEvent} from '../app/Analytics'\n\nexport default class Navigator extends React.Component {\n\n    constructor(props){\n        super(props)\n        this.openingManager = new OpeningManager(this.props.variant)\n        this.state = {\n            currentMove:0,\n        }\n        window.addEventListener(\"keydown\",this.keyHandler.bind(this))\n    }\n    keyHandler(e){\n        switch(e.keyCode) {\n            case 37:\n                this.previous(e, \"keyboard\");\n                break\n            case 39:\n                this.next(e, \"keyboard\")\n                break\n            default:\n                break\n        }\n    }\n\n    // TODO: Put scroll handler behind setting\n    // scrollHandler(e) {\n    //     e.preventDefault();\n\n    //     if (e.deltaY > 0) {\n    //         this.next(e, \"wheel\");\n    //     }\n\n    //     else if (e.deltaY < 0) {\n    //         this.previous(e, \"wheel\");\n    //     }\n    // }\n\n    shouldComponentUpdate(newProps) {\n        //console.log(newProps)\n        if(newProps.variant !== this.props.variant) {\n            this.openingManager = new OpeningManager(newProps.variant)\n            return true\n\n        }\n        if(newProps.fen !== this.openingManager.fen()) {\n            if(newProps.move === null) {\n                // called when \"clear\" or \"starting position\" actions are hit\n                this.openingManager = new OpeningManager(newProps.variant)\n                return true\n            }\n            this.openingManager.addPly(newProps.fen, newProps.move)\n            return true\n        }\n        return true\n    }\n\n    previous(e, device) {\n        let newState = this.openingManager.moveBack()\n        this.props.onChange(newState.fen, newState.move)\n        this.setState({\n            currentMove: this.openingManager.currentMove()\n        })\n        trackEvent(Constants.EVENT_CATEGORY_NAVIGATOR, \"Previous\", device || \"mouse\")\n    }\n\n    next(e, device) {\n        let newState = this.openingManager.moveForward()\n        this.props.onChange(newState.fen, newState.move)\n        this.setState({currentMove:this.openingManager.currentMove()})\n        trackEvent(Constants.EVENT_CATEGORY_NAVIGATOR, \"Next\", device || \"mouse\")\n    }\n\n    moveTo(index) {\n        return () => {\n            let newState = this.openingManager.moveTo(index+1)\n            this.props.onChange(newState.fen, newState.move)\n            this.setState({currentMove:this.openingManager.currentMove()})\n            trackEvent(Constants.EVENT_CATEGORY_NAVIGATOR, \"move\", null, index)\n        }\n    }\n\n    render(){\n        let opening = ChessEcoCodes(this.openingManager.fen())\n        if (opening) {\n            this.opening = opening.name\n            this.openingCode = opening.code\n        }\n        if(!this.openingManager.pgnListSoFar()) {\n            return <div></div>\n        }\n        return <Container id=\"navigator\">\n            <Row>\n                <Col lg=\"6\" className=\"navSection\">\n                    <Button color=\"\" className= \"settingButton\" onClick= {this.previous.bind(this)}>\n                        <FontAwesomeIcon icon={faStepBackward} />\n                        <span>prev</span>\n                    </Button>\n                </Col>\n                <Col lg=\"6\" className=\"navSection\">\n                    <Button color=\"\" className= \"settingButton\" onClick = {this.next.bind(this)}>\n                        <span>next</span>\n                        <FontAwesomeIcon icon={faStepForward} />\n                    </Button>\n                </Col>\n            </Row>\n            <Row className=\"greyText\">{this.openingCode}: {this.opening}</Row>\n            {\n                this.openingManager.pgnListSoFar().map((move, index)=>\n                    <Row key={`${move.moveNumber}`} className=\"navCol\">\n                        <Col sm=\"4\" className = \"navItem border\">\n                            {`${move.moveNumber}.`}\n                        </Col>\n                        <Col sm=\"4\"\n                            className = {`navItem navMove border ${this.openingManager.currentIndex-1 === index*2 ? 'selectedMove':''}`}\n                            onClick={this.moveTo(index*2).bind(this)}>\n                            {`${move.whitePly}`}\n                        </Col>\n                        <Col sm=\"4\"\n                            className = {`navItem navMove border ${this.openingManager.currentIndex-1 === index*2+1 ? 'selectedMove':''}`}\n                            onClick={\n                                this.moveTo(index*2+1).bind(this)}>\n                            {`${move.blackPly}`}\n                        </Col>\n                    </Row>)\n            }\n        </Container>\n    }\n\n    // TODO: Put scroll handler behind setting\n    // componentDidUpdate () {\n    //     const chessBoard = document.querySelector('cg-board');\n    //     const navigator = document.querySelector('#navigator');\n\n    //     if (chessBoard) chessBoard.onwheel = this.scrollHandler.bind(this);\n    //     if (navigator) navigator.onwheel = this.scrollHandler.bind(this);\n    // }\n}","import React, { useState } from 'react';\nimport Faq from 'react-faq-component';\nimport {\n  Navbar,\n  NavbarBrand,\n  NavbarToggler,\n  Collapse,\n  Nav,\n  UncontrolledDropdown,\n  DropdownToggle,\n  DropdownMenu,\n  DropdownItem,\n  Modal,\n  ModalHeader,\n  ModalFooter,\n  Button,\n  ListGroup,\n  ListGroupItem,\n  NavItem, NavLink, ModalBody\n} from 'reactstrap';\n\nimport CookieManager from '../app/CookieManager';\n\nimport 'bootstrap/dist/css/bootstrap.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faComments, faCaretDown, faQuestionCircle } from '@fortawesome/free-solid-svg-icons';\nimport { faDiscord } from '@fortawesome/free-brands-svg-icons';\n\nimport * as Constants from '../app/Constants';\nimport {trackEvent} from '../app/Analytics';\n\nconst GlobalHeader = (props) => {\n  const [isOpen, setIsOpen] = useState(false)\n  const toggle = () => setIsOpen(!isOpen)\n\n  const [modal, setModal] = useState(false);\n  const toggleModal = () => {\n    if(!modal) {\n      trackEvent(Constants.EVENT_CATEGORY_GLOBAL_HEADER, \"AcknowledgementsOpen\")\n    }\n    setModal(!modal)\n  }\n  const [isFAQOpen, setFAQOpen] = useState(false);\n  const toggleFAQModal = () => {\n    if(!isFAQOpen) {\n      trackEvent(Constants.EVENT_CATEGORY_GLOBAL_HEADER, \"FaqOpen\")\n    }\n    setFAQOpen(!isFAQOpen)\n  }\n\n  const launch = (url, eventName) => {\n    return () => {\n      if(eventName) {\n        trackEvent(Constants.EVENT_CATEGORY_GLOBAL_HEADER, eventName)\n      }\n      window.open(url, \"_blank\")\n    }\n  }\n\n  const getHelpDropDown = ()=>{\n    return <UncontrolledDropdown>\n    <DropdownToggle className=\"bootNavColor\" nav>\n    <FontAwesomeIcon icon={faQuestionCircle} className=\"moreIcon\"/>Help\n    </DropdownToggle>\n    <DropdownMenu right>\n      <DropdownItem onClick={toggleFAQModal}>\n        <span>\n          FAQ\n        </span>\n      </DropdownItem>\n      <DropdownItem onClick={launch(\"https://youtu.be/9w7GdGuJoyk\", \"tutorial\")}>\n        <span>\n          Watch Tutorial\n        </span>\n      </DropdownItem>\n    </DropdownMenu>\n  </UncontrolledDropdown>\n  }\n\n  const getMoreDropDown = ()=> {\n      return <UncontrolledDropdown>\n      <DropdownToggle className=\"bootNavColor\" nav>\n      <FontAwesomeIcon icon={faCaretDown} className=\"moreIcon\"/>More\n      </DropdownToggle>\n      <DropdownMenu right>\n        <DropdownItem onClick={toggleModal}>\n          <span>\n            Acknowledgements\n          </span>\n        </DropdownItem>\n        <DropdownItem onClick={launch(\"https://www.openingtree.com/old\", \"OldVersion\")}>\n          <span>\n            Old version\n          </span>\n        </DropdownItem>\n        <DropdownItem onClick={launch(\"https://github.com/openingtree/openingtree\",\"github\")}>\n          <span>\n            Github\n          </span>\n        </DropdownItem>\n        <DropdownItem divider />\n        <DropdownItem onClick={launch(\"https://lichess.org/\",\"lichess\")}>\n          <span>\n            Lichess\n          </span>\n        </DropdownItem>\n        <DropdownItem onClick={launch(\"https://www.lichess4545.com/\",\"lichess4545\")}>\n          <span>\n            Lichess4545\n          </span>\n        </DropdownItem>\n        <DropdownItem onClick={launch(\"https://www.chess.com\",\"chessDotCom\")}>\n          <span>\n            Chess.com\n          </span>\n        </DropdownItem>\n      </DropdownMenu>\n    </UncontrolledDropdown>\n\n  }\n\n  const data = {\n    rows: [\n      {\n          title: \"What is OpeningTree.com?\",\n          content: `OpeningTree.com is an open source website that helps you analyze anyone's lichess or chess.com games. You can use it to prepare for your opponents, improve your own game or learn from openings that grandmasters play.`,\n      },\n      {\n        title: \"How do I use OpeningTree?\",\n        content: `To try it out, you can load Magnus Carlsen's games by choosing, lichess as the source, enter \"DrNykterstein\" in the user name, choose \"white\" and click \"Analyze games\". Hit the stop link when a few hundred games have loaded and click \"View moves\". You can see the moves that Carlsen played as white in his recent games and his win percentages there. You can dig deeper into various lines. The moves shown for black are the moves that were played by his opponents against him.`,\n      },\n      {\n        title: \"What are some of the advanced features of OpeningTree?\",\n        content: `You can analyze games of notable grandmasters from Morphy to Nakamura. You can also analyze games from lichess tournaments to see which moves are being played by others. You can also save openingtree files locally and load them fast or load them from pgn files.`,\n      },\n\n      {\n        title: \"Do I need to login to lichess?\",\n        content: `You dont need to, but logging in increases the speed of download of games from lichess. So if you plan on processing hundreds of games, it is recommended that you login.`,\n      },\n      {\n        title: \"Do I need to keep reloading games everytime I want to analyze the same player? OR What is a .tree file?\",\n        content: `If you plan to keep reloading the same player's games over and over again. The better option is to use the \"Save .tree file\" button after your games have loaded. This saves a pre-processed file of all the games on your local computer. You can then load the file using the \"Load .tree file\" option as the source and load the same file. It can load thousands of games in a matter of seconds.`,\n      },\n      {\n        title: \"Is there a way to filter games by time control, choose only recent games etc.?\",\n        content:`Yes. You can click on \"Advanced filters\" under the \"Color and filters\" panel of openingtree to see many different filtering options that are available.`,\n      },\n      {\n        title: \"What do the triangles under the bars indicate?\",\n        content: `Little triangles indicate the openingbook statistics on the moves tab and the player statistics on the openingbook tab.\n        Everything left of the white triangle is a win for white, everything right of the black triangle is a win for black and everything in the middle is a draw.\n        If there is only a black triangle and no white, it means there are no draws.`,\n      },\n      {\n          title: \"Whenever i click on a square, openingtree selects one square to the left of it.\",\n          content: `This is a know bug with a component that I am using. You can work around it by resizing your browser window, or zooming in and back out. It should resolve the issue.`,\n      }\n    ]\n  };\n\n  const styles = {\n    // bgColor: 'white',\n    rowTitleColor: \"black\",\n    rowContentColor: props.settings.darkMode ? 'white' : 'grey',\n    rowTitleTextSize:'small',\n    rowContentTextSize:'small',\n    rowContentPaddingTop:'1'\n    // arrowColor: \"red\",\n  };\n\n  const config = {\n    // animate: true,\n    // arrowIcon: \"V\",\n    // tabFocus: true\n  };\n\n  const getFAQModal = ()=> {\n    return <Modal isOpen={isFAQOpen} toggle={toggleFAQModal}>\n      <ModalHeader toggle={toggleFAQModal}>Frequently asked questions</ModalHeader>\n      <ModalBody>\n      <Faq data={data} styles={styles} config={config} />\n      </ModalBody>\n      <ModalFooter>\n        <Button color=\"secondary\" onClick={toggleFAQModal}>Done</Button>\n      </ModalFooter>\n    </Modal>\n  };\n\n  const getAcknowledgementsModal = ()=> {\n    return <Modal isOpen={modal} toggle={toggleModal}>\n      <ModalHeader toggle={toggleModal}>Acknowledgements</ModalHeader>\n      <ListGroup className=\"acknowledgement\">\n        <ListGroupItem tag=\"a\" href=\"https://lichess.org/api\" target=\"_blank\" action>Lichess API</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://www.chess.com/club/chess-com-developer-community\" target=\"_blank\" action>Chess.com API</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://github.com/ruilisi/react-chessground\" target=\"_blank\" action>ChessGround</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://github.com/jhlywa/chess.js\" target=\"_blank\" action>Chess.js</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://github.com/niklasf/eco\" target=\"_blank\" action>Eco</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://github.com/jimmywarting/StreamSaver.js\" target=\"_blank\" action>StreamSaver.js</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://www.flaticon.com/authors/google/\" target=\"_blank\" action>Icons made by google</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://www.flaticon.com/\" target=\"_blank\" action>FlatIcons.com</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://www.freelogodesign.org\" target=\"_blank\" action>Free logo design</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://github.com/kevinludwig/pgn-parser\" target=\"_blank\" action>PGN Parser</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://www.npmjs.com/package/material-ui-dropzone\" target=\"_blank\" action>Dropzone</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://www.pgnmentor.com\" target=\"_blank\" action>PGN Mentor</ListGroupItem>\n        <ListGroupItem tag=\"a\" href=\"https://www.twitch.tv/imrosen\" target=\"_blank\" action>IM Eric Rosen</ListGroupItem>\n      </ListGroup>\n      <ModalFooter>\n        <Button color=\"secondary\" onClick={toggleModal}>\n          Done\n        </Button>\n      </ModalFooter>\n    </Modal>\n  }\n\n  return (\n    <div>\n      <Navbar color=\"light\" light expand=\"md\">\n        <img src=\"/opening-tree-logo.png\" height=\"32px\" width=\"32px\" alt=\"Logo\"/>\n        <NavbarBrand href=\"/\">&nbsp;OpeningTree.com</NavbarBrand>\n        <NavbarToggler onClick={toggle}/>\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className=\"mr-auto\" navbar>\n            <NavItem>\n              <NavLink className=\"navLinkButton\" onClick={launch(\"https://www.youtube.com/watch?v=AJ66-HqdpXE\",\"mainVideo\")}>\n                <span>\n                  \"It's so powerful\" - IM Eric Rosen\n                </span>\n                <span className=\"smallText\">\n                  [Watch video]\n                </span>\n              </NavLink>\n            </NavItem>\n          </Nav>\n          <Nav className=\"ml-auto\" navbar>\n            <NavItem>\n              <NavLink className=\"navLinkButton\" onClick={launch(Constants.OPENING_TREE_DISCORD,\"discord\")}>\n                <FontAwesomeIcon icon={faDiscord} className=\"discordIcon\"/>\n                <span>\n                  Join our discord\n                </span>\n              </NavLink>\n            </NavItem>\n          </Nav>\n          <Nav className=\"\" navbar>\n            <NavItem>\n              <NavLink className=\"navLinkButton\" onClick={props.toggleFeedback}>\n                <FontAwesomeIcon icon={faComments} className=\"feedbackIcon\"/>\n                <span>\n                  Send feedback\n                </span>\n              </NavLink>\n            </NavItem>\n          </Nav>\n          {getHelpDropDown()}\n          {getMoreDropDown()}\n        </Collapse>\n      </Navbar>\n\n      {getAcknowledgementsModal()}\n      {getFAQModal()}\n    </div>\n  )\n}\n\nexport default GlobalHeader\n","import { Accordion, getNumberIcon } from './Common';\nimport * as Constants from '../../app/Constants';\n\nimport React from 'react';\n\nimport {\n    AccordionActions,\n    AccordionDetails,\n    AccordionSummary,\n    Button as MaterialUIButton,\n    Collapse,\n    Divider,\n    FormControlLabel,\n    Radio,\n    RadioGroup\n} from '@material-ui/core';\n\nimport {\n    Backup,\n    DateRange,\n    ExpandMore,\n    People,\n    Save\n} from '@material-ui/icons';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faChessRook } from '@fortawesome/free-solid-svg-icons';\n\nconst SOURCE_VARIANT_COMBINATION = {\n    [Constants.VARIANT_RACING_KINGS]:[Constants.SITE_LICHESS, Constants.SITE_ONLINE_TOURNAMENTS, Constants.SITE_OPENING_TREE_FILE, Constants.SITE_PGN_FILE],\n    [Constants.VARIANT_KING_OF_THE_HILL]:[Constants.SITE_CHESS_DOT_COM, Constants.SITE_LICHESS, Constants.SITE_ONLINE_TOURNAMENTS, Constants.SITE_OPENING_TREE_FILE, Constants.SITE_PGN_FILE],\n    [Constants.VARIANT_THREE_CHECK]:[Constants.SITE_CHESS_DOT_COM, Constants.SITE_LICHESS, Constants.SITE_ONLINE_TOURNAMENTS, Constants.SITE_OPENING_TREE_FILE, Constants.SITE_PGN_FILE],\n    [Constants.VARIANT_CRAZYHOUSE]:[Constants.SITE_CHESS_DOT_COM, Constants.SITE_LICHESS, Constants.SITE_ONLINE_TOURNAMENTS, Constants.SITE_OPENING_TREE_FILE, Constants.SITE_PGN_FILE]\n}\n\nexport default class Source extends React.Component {\n    getSourceOption(source, addNumber) {\n        if (source === Constants.SITE_LICHESS) {\n            return <span>{addNumber?getNumberIcon('done', addNumber):null}<img alt=\"lichess\" className=\"siteimage\" src=\"./lichesslogo.png\" /><span className=\"sourceName\"> lichess.org </span></span>\n        } else if (source === Constants.SITE_CHESS_DOT_COM) {\n            return <span>{addNumber?getNumberIcon('done', addNumber):null}<img alt=\"chess.com\" className=\"siteimage\" src=\"./chesscomlogo.png\" /></span>\n        } else if (source === Constants.SITE_PGN_FILE) {\n            return <span>{addNumber?getNumberIcon('done', addNumber):null}<Backup className=\"lowOpacity\"/><span className=\"sourceName\"> Load <i>PGN</i> file</span></span>\n        } else if (source === Constants.SITE_EVENT_DB) {\n            return <span>{addNumber?getNumberIcon('done', addNumber):null}<DateRange className=\"lowOpacity\"/><span className=\"sourceName\"> Notable chess events</span></span>\n        } else if (source === Constants.SITE_PLAYER_DB) {\n            return <span>{addNumber?getNumberIcon('done', addNumber):null}<People className=\"lowOpacity\"/><span className=\"sourceName\"> Notable chess players</span></span>\n        }  else if (source === Constants.SITE_OPENING_TREE_FILE) {\n            return <span>{addNumber?getNumberIcon('done', addNumber):null}<Save className=\"lowOpacity\"/><span className=\"sourceName\"> Load <b>.tree</b> file</span></span>\n        } else if (source === Constants.SITE_ONLINE_TOURNAMENTS) {\n            return <span>{addNumber?getNumberIcon('done', addNumber):null}<FontAwesomeIcon icon={faChessRook} className=\"lowOpacity\" /><span className=\"sourceName\"> Lichess tournaments</span></span>\n        }\n        return <span>{getNumberIcon(1, addNumber)}Select a source</span>\n    }\n    continue(){\n        this.props.siteChange(this.props.site)\n    }\n    setSite(event) {\n        let newSite = event.target.value\n        this.props.siteChange(newSite)\n    }\n    isSourceAvailable(source, variant) {\n        let supportedSources = SOURCE_VARIANT_COMBINATION[variant]\n        if(!supportedSources) {\n            return true\n        }\n        return supportedSources.includes(source)\n    }\n    render() {\n        return <Accordion TransitionComponent={Collapse}\n            TransitionProps={{timeout:Constants.LOADER_ANIMATION_DURATION_MS}}\n            expanded={this.props.expandedPanel === 'source'}\n            onChange={this.props.handleExpansionChange}>\n            <AccordionSummary\n                expandIcon={<ExpandMore />}\n                aria-controls=\"panel1c-content\"\n                id=\"panel1c-header\"\n            >\n                <div>\n                    {this.getSourceOption(this.props.site, true)}\n                </div>\n            </AccordionSummary>\n            <AccordionDetails>\n                <RadioGroup onChange={this.setSite.bind(this)} value={this.props.site}>\n                {this.getSourceRadio(Constants.SITE_LICHESS)}\n                {this.getSourceRadio(Constants.SITE_CHESS_DOT_COM)}\n                {this.getSourceRadio(Constants.SITE_ONLINE_TOURNAMENTS)}\n                {this.getSourceRadio(Constants.SITE_OPENING_TREE_FILE)}\n                {this.props.variant === Constants.VARIANT_STANDARD?<Divider className=\"dividerMargin\"/>:null}\n                {this.getSourceRadio(Constants.SITE_PLAYER_DB)}\n                {this.getSourceRadio(Constants.SITE_EVENT_DB)}\n                {this.getSourceRadio(Constants.SITE_PGN_FILE)}\n               </RadioGroup>\n            </AccordionDetails>\n            {this.props.site?\n            <span>\n            <Divider />\n\n            <AccordionActions>\n                    <MaterialUIButton size=\"small\" color=\"primary\" onClick={this.continue.bind(this)}>Continue</MaterialUIButton>\n                </AccordionActions></span>:\n                null\n            }\n        </Accordion>\n\n    }\n\n    getSourceRadio(source) {\n        if(!this.isSourceAvailable(source,this.props.variant)) {\n            return null\n        }\n        return <FormControlLabel\n                className=\"sitelabel\"\n                value={source}\n                control={<Radio color=\"primary\" />}\n                label={this.getSourceOption(source)} />\n    }\n}","import React from 'react'\nimport {DropzoneArea} from 'material-ui-dropzone'\nimport { trackEvent } from '../../app/Analytics'\nimport * as Constants from '../../app/Constants'\n\nexport default class Dropzone extends React.Component{\n    handleFileChange(newFiles) {\n      trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"FileSaved\", newFiles.length>0?newFiles[0].name:null)\n      this.props.filesChange(newFiles)\n    }\n    render(){\n      return (\n        <DropzoneArea \n        acceptedFiles={[]}\n        dropzoneText={this.props.dropzoneText}\n          onChange={this.handleFileChange.bind(this)}\n          dropzoneParagraphClass=\"dropzonetext\"\n          showFileNames={true}\n          useChipsForPreview={true}\n          previewChipProps={{className:\"previewChip\"}}\n          dropzoneClass=\"dropzone\"\n          filesLimit={this.props.filesLimit}\n          maxFileSize={3000000000000}\n          />\n      )  \n    }\n  } ","import SelectSearch from 'react-select-search';\nimport React from 'react'\nimport * as Constants from '../../app/Constants'\nimport { trackEvent } from '../../app/Analytics';\nimport { LazyLoadImage } from 'react-lazy-load-image-component';\n\nexport default class NotableChessGames extends React.Component {\n\n    updateDetails = (value) => {\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"NotableGameSelected\", value.value)\n        this.props.onChange(value)\n    }\n    \n    renderDetails(option) {\n        return (<div>\n                <span><LazyLoadImage alt={option.name} className=\"profilePicture\" width=\"40\" height=\"40\" src={option.profile.imageUrl} /></span>\n                <div>{option.name}</div>\n                <div className=\"smallText\">{option.profile.subText}</div>\n                </div>);\n    }\n    render() {\n        if(!this.props.list) {\n            return <div className=\"lowOpacity textCenter\"><img alt=\"loading\" width='25' height='25' src=\"./spinner.gif\"/> Loading List</div>\n        } else if(!this.props.list.length) {\n            return <div className=\"lowOpacity textCenter\"> Could not fetch list</div>\n        }\n        let options = this.props.list.map(option=>{return {...option, value:option.name}})\n        return <SelectSearch\n            name=\"goatPlayers\"\n            value={this.props.selectedDetail.value}\n            options={options}\n            placeholder={this.props.placeholder}\n            renderOption={this.renderDetails}\n            onChange={this.updateDetails}\n        />\n    }\n}\n","import React from 'react'\nimport {getNumberIcon} from './Common'\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\nimport { Button as MaterialUIButton, TextField, AccordionDetails } from '@material-ui/core'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faInfoCircle} from '@fortawesome/free-solid-svg-icons'\nimport {faCheck, faSync, faSignOutAlt} from '@fortawesome/free-solid-svg-icons'\nimport Divider from '@material-ui/core/Divider';\nimport AccordionActions from '@material-ui/core/AccordionActions';\nimport {Accordion} from './Common'\nimport * as Constants from '../../app/Constants'\nimport Collapse from '@material-ui/core/Collapse';\nimport Dropzone from './Dropzone'\nimport NotableChessGames from './NotableChessGames';\nimport {Card, CardBody, CardText, CardTitle} from 'reactstrap'\nimport LockOpen from '@material-ui/icons/Lock'\nimport ExitToApp from '@material-ui/icons/ExitToApp'\nimport {Spinner} from 'reactstrap'\nimport { trackEvent } from '../../app/Analytics'\n\nexport default class User extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            playerName:'',\n            tournamentUrl:'',\n            files:[],\n            selectedPlayer:{},\n            selectedEvent:{}\n        }\n        \n    }\n\n    editPlayerName(event) {\n        this.setState({\n            playerName: event.target.value,\n            playerNameError:''\n        })\n    }\n    editTournamentUrl(event) {\n        this.setState({\n            tournamentUrl: event.target.value,\n            tournamentUrlError:''\n        })\n    }\n    filesChange(files) {\n        this.setState({files:files})\n    }\n\n    notablePlayerChange(player) {\n        this.setState({\n            selectedPlayer:player})\n    }\n    notableEventChange(event) {\n        this.setState({\n            selectedEvent:event})\n    }\n\n    componentWillReceiveProps(nextProps) {\n        this.setState({playerNameError:'', tournamentUrlError: ''})\n    }\n    \n    validateInputDetailsSet() {\n        if(this.props.site === Constants.SITE_EVENT_DB){\n            if(!this.state.selectedEvent){\n                this.props.showError(\"Please select an event\")\n                return false\n            } \n        } else if(this.props.site === Constants.SITE_PLAYER_DB){\n            if(!this.state.selectedPlayer){\n                this.props.showError(\"Please select a player\")\n                return false\n            } \n        } else if(this.props.site === Constants.SITE_LICHESS ||\n            this.props.site === Constants.SITE_CHESS_DOT_COM) {\n                if(!this.state.playerName){\n                    this.setState({\n                        playerNameError:'Please enter a username'\n                    })\n                    return false\n                } \n        } else if(this.props.site === Constants.SITE_PGN_FILE) {\n            if(this.state.files.length === 0) {\n                this.props.showError(\"Please upload a PGN file\")\n                return false\n            }\n        } else if(this.props.site === Constants.SITE_OPENING_TREE_FILE) {\n            if(this.state.files.length === 0) {\n                this.props.showError(\"Please upload an openingtree file\")\n                return false\n            }\n        } else if(this.props.site === Constants.SITE_ONLINE_TOURNAMENTS) {\n            if(!this.state.tournamentUrl){\n                this.setState({\n                    tournamentUrlError:'Please enter a url'\n                })\n                return false\n            } else {\n                \n                let url = this.state.tournamentUrl.trim()\n                if(!url.startsWith(\"http\")) {\n                    url = \"https://\"+url\n                }\n                let parsedUrl = null\n                try {\n                    parsedUrl = new URL(url)\n                } catch (e) {\n                    this.setState({\n                        tournamentUrlError:'Please enter a valid url'\n                    })\n                    return false\n                }\n                let hostname = parsedUrl.hostname\n                let tournamentSite = null;\n                if(hostname === 'lichess.org' || hostname.endsWith('.lichess.org')) {\n                    tournamentSite = Constants.SITE_LICHESS\n                } else if(hostname === 'chess.com' || hostname.endsWith('.chess.com')) {\n                    this.setState({\n                        tournamentUrlError:'chess.com tournaments are not currently supported'\n                    })\n                    return false;\n                }\n                if(!tournamentSite) {\n                    this.setState({\n                        tournamentUrlError:'Please enter a lichess.org url'\n                    })\n                    return false;\n                }\n                let pathComponents = parsedUrl.pathname.split(\"/\")\n                let tournamentId = null\n                let tournamentType = null\n                for(let i=0;i<pathComponents.length;i++) {\n                    if(pathComponents[i]) {\n                        tournamentType = pathComponents[i]\n                        break\n                    }\n                }\n\n                for(let i=pathComponents.length-1;i>=0;i--) {\n                    if(pathComponents[i]) {\n                        tournamentId = pathComponents[i]\n                        break\n                    }\n                }\n                if(!tournamentId) {\n                    this.setState({\n                        tournamentUrlError:'Please enter a valid tournament url'\n                    })\n                    return false;\n                }\n                \n                this.selectedOnlineTournament = {\n                    tournamentSite:tournamentSite,\n                    tournamentId:tournamentId,\n                    tournamentType:tournamentType\n                \n                }\n            }\n        }\n        return true\n    }\n    finalPlayerName(source, playerName, selectedNotablePlayer) {\n        if(source === Constants.SITE_PLAYER_DB) {\n            return selectedNotablePlayer.name\n        }\n        if(source === Constants.SITE_EVENT_DB) {\n            return ''\n        }\n        if(!playerName) {\n            return playerName\n        }\n        return playerName.trim()\n    }\n    setPlayerDetails() {\n         if(this.validateInputDetailsSet()) {\n            this.props.playerDetailsChange(\n                this.finalPlayerName(\n                    this.props.site, \n                    this.state.playerName,\n                    this.state.selectedPlayer), \n                this.state.files, \n                this.state.selectedEvent, \n                this.state.selectedPlayer,\n                this.selectedOnlineTournament)\n        }\n    }\n    \n    getSummary() {\n        if(this.props.site === Constants.SITE_PLAYER_DB){\n            if(this.props.selectedPlayer && this.props.selectedPlayer.name) {\n                return <span>\n                        {getNumberIcon('done')}\n                        {this.props.selectedPlayer.profile.title}{'\\u00A0'}\n                        <b>{this.props.selectedPlayer.name}</b>\n                    </span>\n            }\n        } else if(this.props.site === Constants.SITE_LICHESS || \n            this.props.site === Constants.SITE_CHESS_DOT_COM){\n            if(this.props.playerName) {\n                return <span>{getNumberIcon('done')}User: <b>{this.props.playerName}</b></span>\n            }\n        } else if(this.props.site === Constants.SITE_PGN_FILE || \n            this.props.site === Constants.SITE_OPENING_TREE_FILE){\n            if(this.props.files.length===1) {\n                return <span>{getNumberIcon('done')}File: <b>{this.props.files[0].name}</b></span>\n            }\n            if(this.props.files.length>1) {\n                return <span>{getNumberIcon('done')}{this.props.files.length} PGN files uploaded</span>\n            }\n        } else if(this.props.site === Constants.SITE_EVENT_DB) {\n            if(this.props.selectedEvent && this.props.selectedEvent.name) {\n                return <span>{getNumberIcon('done')}{this.props.selectedEvent.name}</span>\n            }\n        }\n        else if(this.props.site === Constants.SITE_ONLINE_TOURNAMENTS) {\n            if(this.props.selectedOnlineTournament) {\n                return <span>{getNumberIcon('done')}Id: <b>{this.props.selectedOnlineTournament.tournamentId}</b></span>\n            }\n        }\n        return <span>{getNumberIcon(2)}{this.title(this.props.site)}</span>\n    }\n\n    title(site){\n        if(site === Constants.SITE_ONLINE_TOURNAMENTS \n            || site === Constants.SITE_EVENT_DB) {\n            return \"Tournament details\"\n        } else if(site === Constants.SITE_OPENING_TREE_FILE \n            || site === Constants.SITE_PGN_FILE) {\n                return \"File details\"\n        } \n        return \"Player details\"\n    }\n\n    launchLichessOauth() {\n        trackEvent(\n            Constants.EVENT_CATEGORY_LICHESS_LOGIN, \"lichessLogin\")\n        setTimeout(()=>{\n            window.location.href = \n                'https://oauth.lichess.org/oauth/authorize?response_type=code&client_id=EBXrB9R9OXpaRvOU&scope=preference:read&redirect_uri=https%3A%2F%2Flichesslogin.openingtree.com&state='+window.location.pathname\n            }, 150)\n        }\n    getLichessSelection() {\n        return <div>\n            {this.getLichessCardBody()}\n            <br/>\n            {this.getPlayerNameInput('lichess username')}\n        </div>\n    }\n\n    getLichessCardBody() {\n        if (this.props.lichessLoginState === Constants.LICHESS_STATE_PENDING) {\n            return <Card>\n                <div className=\"center\">\n                    <Spinner className=\"bigSpinner dividerMargin\" /><br/>\n                </div>\n            </Card>\n        } else if(this.props.lichessLoginState === Constants.LICHESS_FAILED_FETCH) {\n            return <Card><CardBody className=\"singlePadding\">\n            <CardTitle className=\"smallBottomMargin redColor\"><FontAwesomeIcon icon={faInfoCircle} className=\"lowOpacity\"/> Failed to fetch login status</CardTitle>\n            <CardTitle className=\"smallBottomMargin\"><FontAwesomeIcon icon={faSync} className=\"lowOpacity smallText leftMargin2\"/>\n            <span onClick={this.props.refreshLichessStatus} className=\"smallText linkStyle leftMargin4\"> Retry fetching status</span>\n            </CardTitle>\n            <CardTitle><FontAwesomeIcon icon={faSignOutAlt} className=\"lowOpacity smallText leftMargin2\"/>\n            <span onClick={this.props.logoutOfLichess} className=\"smallText linkStyle leftMargin4\"> Logout of lichess</span>\n            </CardTitle>\n    \n                    <MaterialUIButton\n                onClick={this.launchLichessOauth}\n                variant=\"contained\"\n                color=\"default\"\n                className=\"mainButton\" disableElevation\n                startIcon={<LockOpen />}\n                >\n                    LOGIN AGAIN\n                </MaterialUIButton>\n            </CardBody></Card>\n        } else if (this.props.lichessLoginState === Constants.LICHESS_LOGGED_IN && this.props.lichessLoginName) {\n            return <Card>\n                <CardBody className=\"singlePadding\">\n                    <CardTitle>\n                        <FontAwesomeIcon icon={faCheck} className=\"lowOpacity greenColor\"/> Logged in as\n                        <b> {this.props.lichessLoginName}</b>\n                        \n                    </CardTitle>\n                    \n                    <MaterialUIButton\n                        onClick={this.props.logoutOfLichess}\n                        variant=\"contained\"\n                        color=\"default\"\n                        className=\"mainButton\" disableElevation\n                        startIcon={<ExitToApp />}\n                        >\n                            LOGOUT\n                    </MaterialUIButton>\n                </CardBody>\n            </Card>\n        }\n        return <Card><CardBody className=\"singlePadding\">\n        <CardTitle className=\"smallBottomMargin\"><FontAwesomeIcon icon={faInfoCircle} className=\"lowOpacity\"/> Speed up tree building (optional)</CardTitle>\n        <CardText className=\"smallText\">\n            Lichess allows much faster download of games if you login. You can learn more about this <a href = 'https://lichess.org/api#operation/apiGamesUser' rel=\"noopener noreferrer\" target=\"_blank\">here</a>. \n            Recommended for viewing your own games or when your opponent has lots of games.\n        </CardText>\n        <MaterialUIButton\n                onClick={this.launchLichessOauth}\n                variant=\"contained\"\n                color=\"default\"\n                className=\"mainButton\" disableElevation\n                startIcon={<LockOpen />}\n                >\n                    LOGIN TO LICHESS\n                </MaterialUIButton>\n        </CardBody>\n        </Card>\n    }\n\n    getChessComSelection() {\n        return this.getPlayerNameInput('chess.com username')\n    }\n\n    getPlayerNameInput(label, helperText) {\n        return <TextField\n            className=\"playernameField\" name=\"playerName\" id=\"playerNameTextBox\" \n            margin=\"dense\" onChange={this.editPlayerName.bind(this)}\n            label={label} variant=\"outlined\" value={this.state.playerName}\n            helperText={this.state.playerNameError? this.state.playerNameError:helperText}\n            error={this.state.playerNameError?true:false} onKeyUp={this.playerNameKeyUp.bind(this)}/>\n    }\n\n    getOnlineTournamentSelection() {\n        return <div>\n            {this.getOnlineTournamentCard()}\n            <br/>\n            {this.getOnlineTournamentInput('Enter tournament url', 'eg. https://lichess.org/tournament/QlooVt7W')}\n        </div>\n    }\n    getOnlineTournamentCard(){\n        return <Card>\n        <CardBody className=\"singlePadding\">\n        <CardTitle className=\"smallBottomMargin\"><FontAwesomeIcon icon={faInfoCircle} className=\"lowOpacity\"/> How it works</CardTitle>\n        <CardText className=\"smallText\">\n            You can load all of the games of a lichess tournament by copying the  url from your address bar on those sites and pasting it below.\n            <br/><br/>\n            <b>Why is chess.com not supported?</b>\n            <br/>chess.com API has a few bugs in returning tournament games so we are not able to support them currently. Bugs have been reported to chess.com.\n            \n        </CardText>\n        </CardBody>\n        </Card>\n    }\n    \n\n    getOnlineTournamentInput(label, helperText) {\n        return <TextField\n            className=\"urlField\" name=\"onlineTournament\" id=\"onlineTournamentTextBox\" \n            margin=\"dense\" onChange={this.editTournamentUrl.bind(this)}\n            label={label} variant=\"outlined\" value={this.state.tournamentUrl}\n            helperText={this.state.tournamentUrlError? this.state.tournamentUrlError:helperText}\n            error={this.state.tournamentUrlError?true:false} onKeyUp={this.playerNameKeyUp.bind(this)}/>\n    }\n\n    playerNameKeyUp(evt) {\n        if(evt.keyCode === 13) { // enter key pressed\n            this.setPlayerDetails()\n        }\n    }\n    getGoatDBSelection(){\n        return <NotableChessGames \n            list={this.props.notablePlayers} \n            placeholder=\"Select a player\"\n            onChange={this.notablePlayerChange.bind(this)}\n            selectedDetail={this.state.selectedPlayer}/>\n    }\n    getGoatDBEventSelection(){\n        return <NotableChessGames \n            list={this.props.notableEvents} \n            placeholder=\"Select an event\"\n            onChange={this.notableEventChange.bind(this)}\n            selectedDetail={this.state.selectedEvent}/>\n    }\n\n    getPgnFileSelection() {\n        return <div><Dropzone filesChange={this.filesChange.bind(this)} filesLimit={10}\n        dropzoneText=\"Drag and drop up to 10 pgn files here or click here to select files\"\n                />\n                {this.getPlayerNameInput('player name in PGN', 'Leave blank to load all games')}\n                </div>\n    }\n\n    getOpeningTreeSelection() {\n        return <div>\n            <Card>\n                <CardBody className=\"singlePadding\">\n                <CardTitle className=\"smallBottomMargin\"><FontAwesomeIcon icon={faInfoCircle} className=\"lowOpacity\"/> How it works</CardTitle>\n                <CardText className=\"smallText\">\n                    If you plan to revisit the same player, you can save a <b>.tree</b> file locally by loading a tree and then clicking <i>\"Save .tree file\"</i>.\n                    To reload the same tree, drop the <b>.tree</b> file in the dropzone below.\n                </CardText>\n                </CardBody>\n                </Card><br/>\n            <Dropzone filesChange={this.filesChange.bind(this)} filesLimit={1}\n                    dropzoneText=\"Drag and drop openingtree save file here or click here to select a file\"\n                />\n        </div>\n    }\n\n    getInputsToShow() {\n        if(this.props.site === Constants.SITE_PGN_FILE) {\n            return this.getPgnFileSelection()\n        } else if (this.props.site === Constants.SITE_LICHESS) {\n            return this.getLichessSelection()\n        } else if (this.props.site === Constants.SITE_CHESS_DOT_COM) {\n            return this.getChessComSelection()\n        } else if (this.props.site === Constants.SITE_EVENT_DB) {\n            return this.getGoatDBEventSelection()\n        } else if (this.props.site === Constants.SITE_PLAYER_DB) {\n            return this.getGoatDBSelection()\n        } else if(this.props.site === Constants.SITE_OPENING_TREE_FILE) {\n            return this.getOpeningTreeSelection()\n        } else if(this.props.site === Constants.SITE_ONLINE_TOURNAMENTS) {\n            return this.getOnlineTournamentSelection()\n        }\n        return <div/>\n    }\n\n    render() {\n        return <Accordion expanded={this.props.expandedPanel === 'user'}\n                TransitionComponent={Collapse}\n                TransitionProps={{timeout:Constants.LOADER_ANIMATION_DURATION_MS}}\n                onChange={this.props.handleExpansionChange} \n                disabled={this.props.site===''}>\n                <AccordionSummary expandIcon={<ExpandMoreIcon />}>{this.getSummary()}</AccordionSummary>\n                <AccordionDetails>\n                        {this.getInputsToShow()}\n                </AccordionDetails>\n                <Divider />\n                <AccordionActions>\n                    <MaterialUIButton size=\"small\" color=\"primary\" onClick={this.setPlayerDetails.bind(this)}>Continue</MaterialUIButton>\n                </AccordionActions></Accordion>\n            \n    }\n}","import { Accordion, getNumberIcon } from './Common';\nimport * as Constants from '../../app/Constants';\n\nimport React from 'react';\n\nimport {\n    AccordionActions,\n    AccordionDetails,\n    AccordionSummary,\n    Button as MaterialUIButton,\n    Collapse,\n    Divider,\n    FormControlLabel,\n    Radio,\n    RadioGroup\n} from '@material-ui/core';\n\nimport { ExpandMore } from '@material-ui/icons';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faFlagCheckered, faChessKing, faDiceThree, faMountain, faHouseDamage } from '@fortawesome/free-solid-svg-icons';\n\nexport default class Source extends React.Component {\n\n\n    getVariantOption(variant, addNumber) {\n        return <span>\n            {addNumber?getNumberIcon('done', addNumber):null}\n            <FontAwesomeIcon icon={this.getVariantIcon(variant)} /> <span> {this.getVariantText(variant)} </span>\n        </span>\n    }\n\n    getVariantText(variant) {\n        if (variant === Constants.VARIANT_RACING_KINGS) {\n            return \"Racing kings\"\n        } else if (variant === Constants.VARIANT_THREE_CHECK) {\n            return \"Three check\"\n        } else if (variant === Constants.VARIANT_KING_OF_THE_HILL) {\n            return \"King of the hill\"\n        } else if (variant === Constants.VARIANT_CRAZYHOUSE) {\n            return \"Crazyhouse\"\n        }\n        return \"Standard rules\"\n    }\n\n    getVariantIcon(variant) {\n        if (variant === Constants.VARIANT_RACING_KINGS) {\n            return faFlagCheckered\n        } else if (variant === Constants.VARIANT_THREE_CHECK) {\n            return faDiceThree\n        } else if (variant === Constants.VARIANT_KING_OF_THE_HILL) {\n            return faMountain\n        } else if (variant === Constants.VARIANT_CRAZYHOUSE) {\n            return faHouseDamage\n        }\n        return faChessKing\n    }\n    changeLink(){\n        return this.props.expandedPanel === 'variant'?null:<span className=\"smallText\" style={{\"verticalAlign\":\"text-bottom\"}}>&nbsp;[<span className=\"linkStyle\">change</span>]</span>\n    }\n    getVariantRadio(source) {\n        return <FormControlLabel\n                className=\"sitelabel\"\n                value={source}\n                control={<Radio color=\"primary\" />}\n                label={this.getVariantOption(source)} />\n    }\n    continue(){\n        this.props.variantChange(this.props.variant)\n    }\n    setVariant(event){\n        let newVariant = event.target.value\n        this.props.variantChange(newVariant)\n    }\n\n    render() {\n        return <Accordion TransitionComponent={Collapse}\n            TransitionProps={{timeout:Constants.LOADER_ANIMATION_DURATION_MS}}\n            expanded={this.props.expandedPanel === 'variant'}\n            onChange={this.props.handleExpansionChange}>\n            <AccordionSummary\n                expandIcon={<ExpandMore />}\n                aria-controls=\"panel1c-content\"\n                id=\"panel1c-header\"\n            >\n                <div>\n                    {this.getVariantOption(this.props.variant, true)}\n                </div>\n                <div>\n                    {this.changeLink()}\n                </div>\n            </AccordionSummary>\n            <AccordionDetails>\n                <RadioGroup onChange={this.setVariant.bind(this)} value={this.props.variant}>\n                    {this.getVariantRadio(Constants.VARIANT_STANDARD)}\n                    {this.getVariantRadio(Constants.VARIANT_CRAZYHOUSE)}\n                    {this.getVariantRadio(Constants.VARIANT_THREE_CHECK)}\n                    {this.getVariantRadio(Constants.VARIANT_KING_OF_THE_HILL)}\n                    {this.getVariantRadio(Constants.VARIANT_RACING_KINGS)}\n               </RadioGroup>\n            </AccordionDetails>\n            <Divider />\n\n            <AccordionActions>\n                <MaterialUIButton size=\"small\" color=\"primary\" onClick={this.continue.bind(this)}>Continue</MaterialUIButton>\n            </AccordionActions>\n        </Accordion>\n\n    }\n}","import React from 'react'\nimport { createSubObjectWithProperties, getTimeframeSteps } from '../../app/util'\nimport * as Constants from '../../app/Constants'\nimport { trackEvent } from '../../app/Analytics'\nimport Source from './Source'\nimport User from './User'\nimport Filters from './Filters'\nimport Actions from './Actions'\nimport Variants from './Variants'\nimport request from 'request'\nimport * as SitePolicy from '../../app/SitePolicy'\nimport cookieManager from '../../app/CookieManager'\n\nexport default class PGNLoader extends React.Component {\n\n    constructor(props) {\n        super(props)\n        let selectedSite = new URLSearchParams(window.location.search).get(\"source\")\n\n        this.state = {\n            playerName: '',\n            site: selectedSite?selectedSite:'',\n            playerColor: this.props.settings.playerColor,\n            isAdvancedFiltersOpen: false,\n            isGamesSubsectionOpen: false,\n            expandedPanel: selectedSite?'user':'source',\n            notablePlayers:null,\n            notableEvents:null,\n            files:[],\n            selectedNotableEvent:{},\n            selectedNotablePlayer:{},\n            lichessLoginState: Constants.LICHESS_NOT_LOGGED_IN,\n            lichessLoginName: null\n\n        }\n        if(selectedSite === Constants.SITE_LICHESS) {\n            this.fetchLichessLoginStatus()\n        }\n        this.timeframeSteps = getTimeframeSteps()\n        this.state[Constants.FILTER_NAME_SELECTED_TIMEFRAME] = [0, this.timeframeSteps.length - 1]\n        this.state[Constants.FILTER_NAME_DOWNLOAD_LIMIT] = Constants.MAX_DOWNLOAD_LIMIT\n        this.state[Constants.TIME_CONTROL_ULTRA_BULLET] = true\n        this.state[Constants.TIME_CONTROL_BULLET] = true\n        this.state[Constants.TIME_CONTROL_BLITZ] = true\n        this.state[Constants.TIME_CONTROL_RAPID] = true\n        this.state[Constants.TIME_CONTROL_CLASSICAL] = true\n        this.state[Constants.TIME_CONTROL_CORRESPONDENCE] = true\n        this.state[Constants.TIME_CONTROL_DAILY] = true\n        this.state[Constants.FILTER_NAME_RATED] = \"all\"\n        this.state[Constants.FILTER_NAME_ELO_RANGE] = [0, Constants.MAX_ELO_RATING]\n    }\n\n\n    advancedFilters() {\n        return createSubObjectWithProperties(this.state,\n            [Constants.TIME_CONTROL_ULTRA_BULLET, Constants.TIME_CONTROL_BULLET,\n            Constants.TIME_CONTROL_BLITZ, Constants.TIME_CONTROL_RAPID,\n            Constants.TIME_CONTROL_CORRESPONDENCE, Constants.TIME_CONTROL_DAILY,\n            Constants.TIME_CONTROL_CLASSICAL, Constants.FILTER_NAME_RATED,\n            Constants.FILTER_NAME_SELECTED_TIMEFRAME, Constants.FILTER_NAME_DOWNLOAD_LIMIT,\n            Constants.FILTER_NAME_ELO_RANGE])\n    }\n\n\n    handleExpansionChange(panel) {\n        return (event, newExpanded) => {\n            this.setState({ expandedPanel: newExpanded ? panel : false });\n        };\n    }\n\n    exportOpeningTreeObject(){\n        return {\n            header:{\n                version:2,// current openingtree file version. used to check compatibility of files\n                timestamp:Math.floor(Date.now() / 1000),\n                gamesProcessed:this.props.gamesProcessed,\n                settings:this.props.settings,\n                playerName:this.state.playername,\n                site: this.state.site,\n                advancedFilters:this.advancedFilters(),\n                variant:this.props.variant\n            },\n            arrays: [[...this.props.openingGraph.graph.nodes.entries()],\n                        [...this.props.openingGraph.graph.pgnStats]]\n        }\n    }\n\n    importOpeningTreeObject(openingTreeSave) {\n        let saveVersion = 1;\n        if(openingTreeSave.header.version) {\n            saveVersion = openingTreeSave.header.version\n        }\n        if(saveVersion < Constants.OPENING_TREE_FILE_CURRENT_VERSION) {\n            this.props.showError(\"This is an old format of openingtree file.\", null, \n                \"You can try loading it by visiting the old website\", Constants.ERROR_ACTION_VISIT_OLD_SITE)\n            return false\n        }\n        this.setState({\n            ...openingTreeSave.header.advancedFilters,\n            playerColor:openingTreeSave.header.settings.playerColor,\n            site:openingTreeSave.header.site,\n            playerName:openingTreeSave.header.settings.playerName,\n        })\n        this.props.openingGraph.setEntries(openingTreeSave.arrays[0], openingTreeSave.arrays[1])\n        this.props.importCallback({\n            settings:openingTreeSave.header.settings,\n            gamesProcessed:openingTreeSave.header.gamesProcessed,\n            openingGraph:this.props.openingGraph,\n            variant:openingTreeSave.header.variant\n        })\n        return true\n    }\n\n    playerDetailsChange(playerName, files, selectedNotableEvent, selectedNotablePlayer, selectedOnlineTournament) {\n        this.setState({\n            playerName: playerName,\n            expandedPanel:SitePolicy.isFilterPanelEnabled(this.state.site, playerName, selectedNotablePlayer)?'filters':'',\n            files:files,\n            selectedNotableEvent:selectedNotableEvent,\n            selectedNotablePlayer:selectedNotablePlayer,\n            playerColor:'',\n            selectedOnlineTournament:selectedOnlineTournament\n        })\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"PlayerNameSaved\")\n    }\n    fetchGOATGames(url, callback){\n        request.get(url, (error, response) =>{\n            if(error) {\n                this.props.showError(\"Could not fetch player list. Failed to connect to DB.\")\n                callback([])\n                return \n            }\n            let gamesDetails\n            try{\n                gamesDetails = JSON.parse(response.body).list\n            } catch (e) {\n                console.log(e)\n            }\n            if(!gamesDetails) {\n                this.props.showError(\"Failed to load games.\")\n                callback([])\n            } else {\n                callback(gamesDetails)\n            }\n        })\n    }\n\n\n\n    siteChange(newSite) {\n        if(newSite === Constants.SITE_PLAYER_DB && !this.state.notablePlayers) {\n            this.fetchGOATGames('https://goatchess.github.io/list.json', (gamesDetails)=>{\n                this.setState({notablePlayers:gamesDetails})\n            })\n        }\n        if(newSite === Constants.SITE_EVENT_DB && !this.state.notableEvents) {\n            this.fetchGOATGames('https://goatevents.github.io/list.json', (gamesDetails)=>{\n                this.setState({notableEvents:gamesDetails})\n            })\n        }\n        if(newSite === Constants.SITE_LICHESS) {\n            this.fetchLichessLoginStatus()\n        }\n\n        this.setState({ site: newSite, expandedPanel:'user'})\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"ChangeSite\", newSite)\n    }\n    fetchLichessLoginStatus(){\n        let lichessAccessToken = cookieManager.getLichessAccessToken()\n        if(lichessAccessToken) {\n            trackEvent(Constants.EVENT_CATEGORY_LICHESS_LOGIN, \"lichessTokenFound\")\n\n            this.setState({lichessLoginState:Constants.LICHESS_STATE_PENDING})\n            \n            request.get(\"https://lichess.org/api/account\", {timeout:5000, auth:{bearer:cookieManager.getLichessAccessToken()}}, (error, response)=>{\n                if(!error && response) {\n                    let responseObj = JSON.parse(response.body) \n                    if(responseObj && responseObj.username) {\n                        this.setState({\n                            lichessLoginState:Constants.LICHESS_LOGGED_IN,\n                            lichessLoginName:responseObj.username\n                        })\n                        trackEvent(Constants.EVENT_CATEGORY_LICHESS_LOGIN, \"lichessFetchSuccess\")\n                        return\n                    } \n                } \n                trackEvent(Constants.EVENT_CATEGORY_LICHESS_LOGIN, \"lichessFetchFailed\")\n                this.setState({lichessLoginState:Constants.LICHESS_FAILED_FETCH})\n            })\n        } else {\n            trackEvent(Constants.EVENT_CATEGORY_LICHESS_LOGIN, \"lichessNoToken\")\n        }\n    }\n    logoutOfLichess() {\n        cookieManager.deleteLichessAccessToken()\n        this.setState({\n            lichessLoginState:Constants.LICHESS_NOT_LOGGED_IN,\n            lichessLoginName:''\n        })\n        trackEvent(Constants.EVENT_CATEGORY_LICHESS_LOGIN, \"lichessLogout\")\n    }\n\n    filtersChange(filters) {\n        this.setState({...filters, expandedPanel:''})\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"FitlersSaved\", this.state.site)\n    }\n    variantChange(newVariant) {\n        this.setState({expandedPanel:'source'})\n        this.props.variantChange(newVariant)\n        trackEvent(Constants.EVENT_CATEGORY_PGN_LOADER, \"VariantChange\", newVariant)\n    }\n\n    render() {\n        return <div><div className=\"pgnloadersection\">\n            <Variants expandedPanel={this.state.expandedPanel}\n                handleExpansionChange={this.handleExpansionChange('variant').bind(this)}\n                variantChange={this.variantChange.bind(this)} variant={this.props.variant}/>\n            <Source expandedPanel={this.state.expandedPanel}\n                handleExpansionChange={this.handleExpansionChange('source').bind(this)}\n                site={this.state.site} siteChange={this.siteChange.bind(this)}\n                variant={this.props.variant}/>\n            <User expandedPanel={this.state.expandedPanel} playerName={this.state.playerName}\n                handleExpansionChange={this.handleExpansionChange('user').bind(this)} \n                showError={this.props.showError} files={this.state.files} notablePlayers={this.state.notablePlayers}\n                notableEvents={this.state.notableEvents} site={this.state.site} playerDetailsChange={this.playerDetailsChange.bind(this)}\n                pgnUrl={this.state.pgnUrl} selectedPlayer={this.state.selectedNotablePlayer} selectedEvent={this.state.selectedNotableEvent}\n                lichessLoginState={this.state.lichessLoginState} lichessLoginName={this.state.lichessLoginName}\n                logoutOfLichess={this.logoutOfLichess.bind(this)} refreshLichessStatus={this.fetchLichessLoginStatus.bind(this)}\n                selectedOnlineTournament={this.state.selectedOnlineTournament}\n            />\n            <Filters expandedPanel={this.state.expandedPanel} playerColor={this.state.playerColor}\n                handleExpansionChange={this.handleExpansionChange('filters').bind(this)}\n                site={this.state.site} playerName={this.state.playerName} advancedFilters={this.advancedFilters()}\n                timeframeSteps={this.timeframeSteps} filtersChange={this.filtersChange.bind(this)}\n                selectedNotablePlayer={this.state.selectedNotablePlayer} />\n            </div>\n            <Actions expandedPanel={this.state.expandedPanel} playerColor={this.state.playerColor} files={this.state.files}\n                playerName={this.state.playerName} site={this.state.site} advancedFilters={this.advancedFilters()}\n                notify={this.props.notify} showError={this.props.showError} onChange={this.props.onChange}\n                setDownloading={this.props.setDownloading} clear={this.props.clear} isDownloading={this.props.isDownloading}\n                switchToMovesTab={this.props.switchToMovesTab} gamesProcessed={this.props.gamesProcessed} \n                selectedNotablePlayer={this.state.selectedNotablePlayer} selectedNotableEvent={this.state.selectedNotableEvent}\n                exportOpeningTreeObject={this.exportOpeningTreeObject.bind(this)} showInfo={this.props.showInfo}\n                importOpeningTreeObject={this.importOpeningTreeObject.bind(this)} selectedOnlineTournament={this.state.selectedOnlineTournament}\n                variant={this.props.variant}/>\n        </div>\n    }\n\n}","import React from 'react';\nimport { Button, Col, Container, Row } from 'reactstrap';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faDesktop, faFastBackward, faMoon, faRetweet, faTrashAlt } from '@fortawesome/free-solid-svg-icons';\n\nimport { trackEvent } from '../app/Analytics';\nimport * as Constants from '../app/Constants';\n\nexport default class SettingsView extends React.Component {\n    constructor(props){\n        super(props)\n        window.addEventListener(\"keydown\",this.keyHandler.bind(this))\n    }\n\n    keyHandler(e){\n        if (e.srcElement && e.srcElement.tagName === 'INPUT') {\n            return;\n        }\n\n        switch(e.keyCode) {\n            case 70: // F key\n                this.toggle('orientation')();\n                break;\n            default:\n                break;\n        }\n    }\n\n    toggle(eventName) {\n        return (() => {\n            let newValue;\n            switch (eventName) {\n                case 'orientation':\n                    newValue = this.props.settings[eventName] === Constants.PLAYER_COLOR_WHITE\n                        ? Constants.PLAYER_COLOR_BLACK\n                        : Constants.PLAYER_COLOR_WHITE;\n                    trackEvent(Constants.EVENT_CATEGORY_CONTROLS, \"ChangeOrientation\")\n                    break;\n                case 'darkMode':\n                    newValue = !this.props.settings[eventName];\n                    trackEvent(Constants.EVENT_CATEGORY_CONTROLS, \"DarkMode\");\n                    break;\n                default:\n                    break;\n            }\n            this.props.onChange(eventName, newValue);\n        })\n    }\n\n    analyse() {\n        window.open(`https://www.lichess.org/analysis/standard/${this.props.fen}`, '_blank');\n        trackEvent(Constants.EVENT_CATEGORY_CONTROLS, \"AnalyzeGame\")\n    }\n\n    resetAction() {\n        this.props.reset()\n        trackEvent(Constants.EVENT_CATEGORY_CONTROLS, \"Reset\")\n    }\n\n    clearAction() {\n        this.props.clear()\n        trackEvent(Constants.EVENT_CATEGORY_CONTROLS, \"Clear\")\n    }\n\n    render() {\n        return <div>\n            <Container>\n                <Row sm=\"12\">\n                    <Col sm=\"6\">\n                        <Button className=\"settingButton\" onClick = {this.toggle('orientation')} color=\"\">\n                            <h3>\n                                <FontAwesomeIcon icon={faRetweet} />\n                            </h3>\n                            <span>\n                                Flip board\n                            </span>\n                        </Button>\n                    </Col>\n                    <Col sm=\"6\">\n                        <Button className=\"settingButton\" onClick = {this.clearAction.bind(this)} color=\"\">\n                            <h3>\n                                <FontAwesomeIcon icon={faTrashAlt} />\n                            </h3>\n                            <span>\n                                Clear games\n                            </span>\n                        </Button>\n                    </Col>\n                    <Col sm=\"6\">\n                        <Button className=\"settingButton\" onClick = {this.resetAction.bind(this)} color=\"\">\n                            <h3>\n                                <FontAwesomeIcon icon={faFastBackward} />\n                            </h3>\n                            <span>\n                                Starting position\n                            </span>\n                        </Button>\n                    </Col>\n                    <Col sm=\"6\">\n                        <Button className=\"settingButton\" onClick = {this.analyse.bind(this)} color=\"\">\n                            <h3>\n                                <FontAwesomeIcon icon={faDesktop} />\n                            </h3>\n                            <span>\n                                Computer analysis\n                            </span>\n                        </Button>\n                    </Col>\n                    <Col sm=\"6\">\n                        <Button className=\"settingButton\" onClick={this.toggle('darkMode')} color=\"\">\n                            <h3>\n                                <FontAwesomeIcon icon={faMoon} />\n                            </h3>\n                            <span>\n                                Dark mode\n                            </span>\n                        </Button>\n                    </Col>\n                </Row>\n            </Container>\n        </div>\n    }\n}","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faExternalLinkAlt, faUser } from '@fortawesome/free-solid-svg-icons'\nimport { Table, TableRow, TableHead, TableBody, TableCell, TableFooter, TextField } from '@material-ui/core';\nimport React from 'react'\nimport {getPerformanceDetails} from '../app/util'\nimport {copyText} from './loader/Common'\n\nexport default class ReportControls extends React.Component {\n    eatClicks(e) {\n        e.stopPropagation()\n    }\n\n    copyFen() {\n        copyText(\"fenField\")/* Get the text field */\n        /* Alert the copied text */\n        this.props.showInfo(\"FEN copied\");\n    }\n\n    getFenField() {\n        return this.props.simplifiedView?null:\n            <div className=\"fenDiv\">\n            <TextField\n                id=\"fenField\"\n                multiline\n                label=\"FEN\"\n                rowsMax=\"2\"\n                value={this.props.fen}\n                inputProps={{\n                    style: {fontSize: 12},\n                    spellCheck: false,\n                  }}\n                  variant=\"outlined\"\n                className=\"fenField\"\n                margin=\"dense\"\n                onClick = {this.copyFen.bind(this)}\n                /></div>\n    }\n\n\n    render() {\n        let moveDetails = this.props.moveDetails\n        if(!moveDetails.hasData) {\n            return <div>{this.getFenField()}<div className = \"infoMessage\" >No data to show. Please enter a lichess or chess.com user name in the\n                <span className = \"navLinkButton\" onClick={()=>this.props.switchToUserTab()}> <FontAwesomeIcon icon={faUser} /> User</span> tab and click \"Load\"</div>\n                </div>\n        }\n        let performanceDetails = {}\n        if(this.props.isOpen) {\n            performanceDetails = getPerformanceDetails(moveDetails.totalOpponentElo,\n                                                        moveDetails.averageElo,\n                                                        moveDetails.whiteWins,\n                                                        moveDetails.draws,\n                                                        moveDetails.blackWins,\n                                                        this.props.settings.playerColor)\n        }\n\n        return <div class=\"performanceOverlay\">\n            {this.getFenField()}\n            <Table onClick={this.eatClicks}>\n            {!performanceDetails.performanceRating || (isNaN(performanceDetails.performanceRating) || !this.props.settings.playerName)?\n            null:\n            <TableHead className={`performanceRatingRow${this.props.simplifiedView?\" performanceHeader\":\"\"}`}>\n                <TableRow>\n                <TableCell className=\"performanceRatingRow\"><b>Performance</b></TableCell>\n                <TableCell className=\"performanceRatingRow\"><b>{performanceDetails.performanceRating}</b></TableCell>\n                </TableRow>\n            </TableHead>}\n            <TableBody>\n            <TableRow className=\"performanceRatingRow\">\n                <TableCell className=\"performanceRatingRow\">Results</TableCell>\n                <TableCell className=\"performanceRatingRow\">{performanceDetails.results}</TableCell>\n            </TableRow>\n            {(isNaN(performanceDetails.averageOpponentElo) || performanceDetails.averageOpponentElo <= 0 || !this.props.settings.playerName)?null:\n            <TableRow className=\"performanceRatingRow\">\n                <TableCell className=\"performanceRatingRow\">Avg opponent</TableCell>\n                <TableCell className=\"performanceRatingRow\">{performanceDetails.averageOpponentElo}</TableCell>\n            </TableRow>}\n            {(isNaN(performanceDetails.averageElo))?null:\n            <TableRow className=\"performanceRatingRow\">\n                <TableCell className=\"performanceRatingRow\">Avg Elo</TableCell>\n                <TableCell className=\"performanceRatingRow\">{performanceDetails.averageElo}</TableCell>\n            </TableRow>}\n            <TableRow className=\"performanceRatingRow\">\n                <TableCell className=\"performanceRatingRow\">Score</TableCell>\n                <TableCell className=\"performanceRatingRow\">{performanceDetails.score}</TableCell>\n            </TableRow>\n            {((this.props.simplifiedView || isNaN(performanceDetails.averageElo)) || !this.props.settings.playerName)?null:\n            <TableRow className=\"performanceRatingRow\">\n                <TableCell className=\"performanceRatingRow\">Rating change</TableCell>\n                <TableCell className=\"performanceRatingRow\">{performanceDetails.ratingChange}</TableCell>\n            </TableRow>\n            }\n            {(this.props.settings.playerName && !this.props.simplifiedView && moveDetails.bestWinElo)?<TableRow className=\"performanceRatingRow\">\n                <TableCell className=\"performanceRatingRow\">Best win</TableCell>\n                <TableCell className=\"performanceRatingRow\">{moveDetails.bestWinElo} <FontAwesomeIcon className=\"pointerExternalLink\" onClick ={this.props.launchGame(moveDetails.bestWinGame)} icon={faExternalLinkAlt}/></TableCell>\n            </TableRow>:null}\n            {(this.props.settings.playerName && !this.props.simplifiedView && moveDetails.worstLossElo)?<TableRow className=\"performanceRatingRow\">\n                <TableCell className=\"performanceRatingRow\">Worst loss</TableCell>\n                <TableCell className=\"performanceRatingRow\">{moveDetails.worstLossElo} <FontAwesomeIcon className=\"pointerExternalLink\" onClick ={this.props.launchGame(moveDetails.worstLossGame)} icon={faExternalLinkAlt}/></TableCell>\n            </TableRow>:null}\n            {(!this.props.simplifiedView && moveDetails.longestGameInfo)?<TableRow className=\"performanceRatingRow\">\n                <TableCell className=\"performanceRatingRow\">Longest game</TableCell>\n                <TableCell className=\"performanceRatingRow\">{moveDetails.longestGameInfo.numberOfPlys} Plys <FontAwesomeIcon className=\"pointerExternalLink\" onClick ={this.props.launchGame(moveDetails.longestGameInfo)} icon={faExternalLinkAlt}/></TableCell>\n            </TableRow>:null}\n            {(!this.props.simplifiedView && moveDetails.shortestGameInfo)?<TableRow className=\"performanceRatingRow\">\n                <TableCell className=\"performanceRatingRow\">Shortest game</TableCell>\n                <TableCell className=\"performanceRatingRow\">{moveDetails.shortestGameInfo.numberOfPlys} Plys <FontAwesomeIcon className=\"pointerExternalLink\" onClick ={this.props.launchGame(moveDetails.shortestGameInfo)} icon={faExternalLinkAlt}/></TableCell>\n            </TableRow>:null}\n\n            {moveDetails.lastPlayedGame?<TableRow className=\"performanceRatingRow\">\n                <TableCell className=\"performanceRatingRow\">Last played</TableCell>\n                <TableCell className=\"performanceRatingRow\">{this.removeQuestionMarksFromDate(moveDetails.lastPlayedGame.date)} <FontAwesomeIcon className=\"pointerExternalLink\" onClick ={this.props.launchGame(moveDetails.lastPlayedGame)} icon={faExternalLinkAlt}/></TableCell>\n            </TableRow>:null}\n            </TableBody>\n            {!this.props.reportFooter?null:\n            <TableFooter>\n                <TableRow>\n                    <TableCell colSpan=\"2\">{this.props.reportFooter}</TableCell>\n                </TableRow>\n            </TableFooter>\n            }\n        </Table></div>\n    }\n\n    removeQuestionMarksFromDate(date) {\n        if(!date || date.indexOf('?') === -1) {\n            return date\n        }\n        return date.slice(0, date.indexOf('.'))\n    }\n}","export function playerDetails(name, elo) {\n    return `${name}${elo?`(${elo})`:''}`\n}\n","import React from 'react'\nimport {\n    Modal,\n    ModalHeader,\n    ModalBody,\n    ModalFooter,\n    Button\n} from 'reactstrap'\nimport Switch from '@material-ui/core/Switch';\nimport {\n    FormControlLabel\n} from '@material-ui/core'\nimport {\n    ToggleButtonGroup,\n    ToggleButton\n} from '@material-ui/lab'\nimport * as Constants from '../../app/Constants'\nimport { Collapse, CardBody, Card, CardText } from 'reactstrap';\nimport Link from '@material-ui/core/Link'\nimport {trackEvent} from '../../app/Analytics'\n\nexport default class MovesSettings extends React.Component {\n    constructor(props) {\n        super(props)\n        let mSettings = Object.assign({},this.props.settings.movesSettings)\n        mSettings.openingBookType = this.getTransformedBookType(mSettings.openingBookType)\n        this.state={\n            movesSettings: mSettings,\n            indicatorInfoOpen:false\n        }\n    }\n\n    updateMoveSetting(key) {\n        return (e, value) => {\n            if(Array.isArray(value) && value.length <1) {\n                return\n            }\n            let newMovesSettings = Object.assign({},this.state.movesSettings)\n            newMovesSettings[key] = value\n            this.setState({\n                movesSettings:newMovesSettings\n            })\n        }\n    }\n\n    cancel() {\n        //reset to original settings\n        this.setState({movesSettings: this.props.settings.movesSettings})\n        this.props.toggle()\n        trackEvent(Constants.EVENT_CATEGORY_SETTINGS, \"MoveSettingsCancel\")\n    }\n\n    set() {\n        //reset to  new settings\n        this.props.settingsChange('movesSettings', this.state.movesSettings)\n        this.props.toggle()\n        trackEvent(Constants.EVENT_CATEGORY_SETTINGS, \"MoveSettingsSet\")\n    }\n\n    toggleIndicatorInfo(e) {\n        this.setState({indicatorInfoOpen:!this.state.indicatorInfoOpen})\n        if(!this.state.indicatorInfoOpen) {\n            trackEvent(Constants.EVENT_CATEGORY_SETTINGS, \"MoveSettingsIndicatorInfo\")\n        }\n    }\n\n    render() {\n        return <Modal isOpen={this.props.isOpen} toggle={this.cancel.bind(this)}>\n            <ModalHeader toggle={this.cancel.bind(this)}>Opening book settings</ModalHeader>\n            <ModalBody>\n                <div className=\"littlePaddingTop\">{this.getOpeningBookType()}</div>\n                {this.state.movesSettings.openingBookType === Constants.OPENING_BOOK_TYPE_LICHESS?\n                <div className=\"littlePaddingTop\">{this.getOpeningBookRating()}</div>\n                :null}   \n                {this.state.movesSettings.openingBookType === Constants.OPENING_BOOK_TYPE_LICHESS?\n                <div className=\"littlePaddingTop\">{this.getOpeningBookTimeControls()}</div>\n                :null}   \n                <div className=\"littlePaddingTop\">{this.getIndicatorSwitch(\"openingBookWinsIndicator\", <span>Book indicators <Link href=\"#\" className=\"smallText\" onClick={this.toggleIndicatorInfo.bind(this)}>whats this?</Link></span>)}</div>\n                <Collapse isOpen={this.state.indicatorInfoOpen}>\n                <Card>\n                    <CardBody className=\"singlePadding\">\n                    <img src=\"./images/bookIndicator.png\" alt=\"bookIndicator\"/>\n                    <CardText className=\"smallText\">\n                        Little triangles indicate the openingbook statistics on the moves tab and the player \n                        statistics on the openingbook tab. <br/>Everything left of the white triangle is a win for white, \n                        everything right of the black triangle is a win for black and everything in the middle is a draw.<br/>\n                        If there is only a black triangle and no white, it means there are no draws.</CardText>\n                    </CardBody>\n                    </Card>\n                </Collapse>\n            </ModalBody>\n            <ModalFooter>\n            <Button color=\"link\" onClick={this.cancel.bind(this)}>Cancel</Button>\n            <Button color=\"primary\" onClick={this.set.bind(this)}>Set</Button>\n\n            </ModalFooter>\n        </Modal>\n    }\n\n    getIndicatorSwitch(name, label) {\n        return <div><FormControlLabel\n            control={\n                <Switch\n                    checked={this.state.movesSettings[name]}\n                    name={name}\n                    color=\"primary\"\n                />\n            }\n            onChange={this.updateMoveSetting(name)}\n            label={label}\n      /></div>\n    }\n\n    mastersBookAvailable() {\n        // masters book is only available for standard mode\n        return this.props.variant === Constants.VARIANT_STANDARD\n    }\n\n    getTransformedBookType(value){\n        //if masters book is not available, use lichess book\n        if(value === Constants.OPENING_BOOK_TYPE_MASTERS\n            && !this.mastersBookAvailable()) {\n            return Constants.OPENING_BOOK_TYPE_LICHESS\n        }\n        return value\n    }\n\n    getOpeningBookType() {\n        return <div>Book type<br/><ToggleButtonGroup size=\"small\" exclusive={true} value={this.getTransformedBookType(this.state.movesSettings.openingBookType)} onChange={this.updateMoveSetting('openingBookType')} aria-label=\"book type\">\n            <ToggleButton value={Constants.OPENING_BOOK_TYPE_OFF} aria-label={Constants.OPENING_BOOK_TYPE_OFF}>\n                Off\n            </ToggleButton> {\n                this.mastersBookAvailable()?\n                <ToggleButton value={Constants.OPENING_BOOK_TYPE_MASTERS} aria-label={Constants.OPENING_BOOK_TYPE_MASTERS}>\n                    Masters\n                </ToggleButton>\n                :null\n            }\n            <ToggleButton value={Constants.OPENING_BOOK_TYPE_LICHESS} aria-label={Constants.OPENING_BOOK_TYPE_LICHESS}>\n                Lichess\n            </ToggleButton>\n        </ToggleButtonGroup></div>\n    }\n    getOpeningBookRating() {\n        return <div>Rating<br/><ToggleButtonGroup size=\"small\" value={this.state.movesSettings.openingBookRating} onChange={this.updateMoveSetting('openingBookRating')} aria-label=\"text formatting\">\n            <ToggleButton value=\"1600\" aria-label=\"1600\">\n                1600\n            </ToggleButton>\n            <ToggleButton value=\"1800\" aria-label=\"1800\">\n                1800\n            </ToggleButton>\n            <ToggleButton value=\"2000\" aria-label=\"2000\">\n                2000\n            </ToggleButton>\n            <ToggleButton value=\"2200\" aria-label=\"2200\">\n                2200\n            </ToggleButton>\n            <ToggleButton value=\"2500\" aria-label=\"2500\">\n                2500\n            </ToggleButton>\n        </ToggleButtonGroup></div>\n    }\n\n    getOpeningBookTimeControls() {\n        return <div>Time controls<br/><ToggleButtonGroup size=\"small\" value={this.state.movesSettings.openingBookTimeControls} onChange={this.updateMoveSetting('openingBookTimeControls')} aria-label=\"text formatting\">\n            <ToggleButton value=\"bullet\" aria-label=\"bullet\">\n            Bullet\n            </ToggleButton>\n            <ToggleButton value=\"blitz\" aria-label=\"blitz\">\n            Blitz\n            </ToggleButton>\n            <ToggleButton value=\"rapid\" aria-label=\"rapid\">\n            Rapid\n            </ToggleButton>\n            <ToggleButton value=\"classical\" aria-label=\"classical\">\n            Classical\n            </ToggleButton>\n        </ToggleButtonGroup></div>\n    }\n\n}\n","import React from 'react'\nimport {Progress, Popover } from \"reactstrap\"\nimport { Table, TableRow, TableHead, TableBody, TableCell, TableFooter } from '@material-ui/core';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faExternalLinkAlt, faInfoCircle, faExclamationTriangle, faWrench } from '@fortawesome/free-solid-svg-icons'\nimport ReportControls from '../ReportControls'\nimport {Container, Row, Col} from 'reactstrap'\nimport \"react-step-progress-bar/styles.css\";\nimport {trackEvent} from '../../app/Analytics'\nimport * as Constants from '../../app/Constants'\nimport { ProgressBar,Step } from \"react-step-progress-bar\";\nimport {playerDetails} from './MovesCommon'\nimport {simplifyCount} from '../../app/util'\nimport MovesSettings from './MovesSettings'\n\nexport default class MovesTable extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            openPerformanceIndex: null,\n            moveSettingsOpen:false\n        }\n    }\n    isTouchDevice() {\n        return 'ontouchstart' in window;\n    }\n      \n      \n\n    componentDidUpdate(prevProps, prevState) {\n        if(prevProps.turnColor !== this.props.turnColor) {\n            this.setState({\n                openPerformanceIndex: null,\n            })\n        }\n    }\n\n    move(san) {\n        return () => {\n            this.props.onMove(san)\n            trackEvent(Constants.EVENT_CATEGORY_MOVES_LIST, this.props.clickedEventName)\n        }\n    }\n\n    toggleMovesSettings(){\n        if(!this.state.moveSettingsOpen) {\n            trackEvent(Constants.EVENT_CATEGORY_SETTINGS, \"MoveSettingsOpen\")\n        }\n        this.setState({moveSettingsOpen:!this.state.moveSettingsOpen})\n    }\n\n    togglePerformancePopover(moveIndex) {\n        return (e) => {\n            if(this.state.openPerformanceIndex !== null) {\n                this.setState({openPerformanceIndex:null})\n            } else {\n                this.setState({openPerformanceIndex: moveIndex})\n            }\n            e.stopPropagation()\n        }\n    }\n    \n    compareClicked(san){\n        return (e)=>{\n            e.stopPropagation()\n            this.props.compareToClicked(san)\n        }\n    }\n\n    compareScores(currMove) {\n        let compareTo = currMove.compareTo\n        if(!compareTo) {\n            return null\n        }\n        let values = [compareTo.bookScore, compareTo.userScore]\n        return (\n            <ProgressBar\n              percent={0}\n              stepPositions={values}\n            >\n                {this.getIndicator(\"./images/book.png\", \"12\", \"12\", \n                    this.constructAlt(this.props.compareToAlt,values),\n                    this.compareClicked(currMove.san))}\n                {this.getIndicator(\"./images/user.png\", \"12\", \"12\", \n                    this.constructAlt(this.props.compareToAlt,values),\n                    this.compareClicked(currMove.san))}\n            </ProgressBar>\n          )\n    }\n\n    compareProgress(currMove){\n        let compareTo = currMove.compareTo\n        if(!compareTo) {\n            return null\n        }\n        return (\n            <ProgressBar\n              percent={0}\n              stepPositions={compareTo.values}\n            >\n                {this.getIndicator(\"./images/arrow-white.png\", \"20\", \"16\", \n                    this.constructAlt(this.props.compareToAlt,compareTo.values),\n                    this.compareClicked(currMove.san))}\n                {this.getIndicator(\"./images/arrow-black.png\", \"18\", \"14\", \n                    this.constructAlt(this.props.compareToAlt,compareTo.values),\n                    this.compareClicked(currMove.san))}\n            </ProgressBar>\n          )\n    }\n    constructAlt(altTitle, steps) {\n        let white = Math.round(steps[0])\n        let draws = Math.round(steps[1])-white\n        let black = 100-white-draws\n        return `${altTitle} \\nWhite wins ${white}% \\nDraws ${draws}% \\nBlack wins ${black}%`\n    }\n    //&#013;\n\n    getIndicator(src, height, width, alt, click) {\n        return <Step transition=\"scale\">\n            {({ accomplished }) => (\n            <img onClick = {click}\n                alt={alt}\n                title={alt}\n                className=\"pointerExternalLink\"\n                width={width}\n                height={height}\n                src={src}\n            />\n            )}\n          </Step>\n    }\n\n    getPopover(moveIndex) {\n        let performancePopoverOpen = this.state.openPerformanceIndex === moveIndex\n        let openMove = this.props.movesToShow[moveIndex]\n\n        return <Popover trigger=\"hover\" placement=\"right\" isOpen={performancePopoverOpen} target={`p${this.props.namespace}${moveIndex}`} toggle={this.togglePerformancePopover(moveIndex)}>\n                <ReportControls moveDetails={openMove.details} simplifiedView={true} \n                isOpen = {performancePopoverOpen} launchGame={this.props.launchGame} \n                settings={this.props.settings} reportFooter ={this.reportFooter(moveIndex)}/>\n            </Popover>\n    }\n\n    reportFooter(moveIndex) {\n        let currMove = this.props.movesToShow[moveIndex]\n\n        if(this.getTranspositionWarningLevel(moveIndex)!=='none') {\n            return <div>{this.getInfoIcon(moveIndex)}<b> This move has transpositions</b> <div>{currMove.san} has been played only {currMove.moveCount} times but the resulting position has appeared {currMove.details.count} times through other move orders.</div></div>\n        }\n    }\n\n    getTranspositionWarningLevel(moveIndex){\n        let currMove = this.props.movesToShow[moveIndex]\n        let targetCount = currMove.details.count\n        let difference = targetCount - currMove.moveCount\n        if (difference>0) {\n            if(difference>10 && difference/targetCount>0.1) {\n                return \"warning\"\n            } else {\n                return \"info\"\n            }\n        }\n        return \"none\"\n    }\n\n    render() {\n        let hasMoves = (this.props.movesToShow && this.props.movesToShow.length>0)\n        return <Table>\n            {hasMoves?\n        <TableHead>\n        <TableRow>\n            <TableCell size=\"small\" className=\"smallCol\"><b>Move</b></TableCell>\n            <TableCell size=\"small\" className=\"smallCol\"><b>Games</b></TableCell>\n            <TableCell><b>Results</b><FontAwesomeIcon \n                className={`floatRight pointer`} \n                icon={faWrench} onClick={this.toggleMovesSettings.bind(this)}/>\n                <MovesSettings isOpen={this.state.moveSettingsOpen} \n                    toggle={this.toggleMovesSettings.bind(this)}\n                    settingsChange={this.props.settingsChange}\n                    updateSettings = {this.props.updateSettings}\n                    settings={this.props.settings}\n                    variant={this.props.variant}/>\n            </TableCell>\n        </TableRow></TableHead>\n        :null}\n        {hasMoves?\n        <TableBody>\n        {\n        this.props.movesToShow.map((move, moveIndex) => {\n            let lastPlayedGame = move.details.lastPlayedGame\n            return lastPlayedGame && move.moveCount === 1?\n                this.getSingleItemRow(move,lastPlayedGame):\n                this.getMultiItemRow(move, moveIndex)\n                \n            }\n        )}\n    </TableBody>\n    :null}\n        <TableFooter><TableRow>\n            <TableCell colSpan=\"3\">\n                {this.props.tableFooter}\n            </TableCell>\n        </TableRow></TableFooter>\n    </Table>\n    }\n    highlightArrowFn(move) {\n        if(this.isTouchDevice()) {\n            // do not highlight on touch screens because it gives weird behavior\n            // single touch just highlights the arrow and user will need to double touch to make the move\n            return ()=>{return}\n        }\n        return ()=>{\n            this.props.highlightArrow(move)\n        }\n    }\n    getMultiItemRow(move, moveIndex) {\n        return <TableRow className={`${this.props.highlightMove === move.san?'bgColor ':''}moveRow`} \n                        key = {`m${move.orig}${move.dest}${move.san}`} \n                        onClick={this.move(move.san)} \n                        onMouseOver={this.highlightArrowFn(move).bind(this)} \n                        onMouseOut={()=>this.props.highlightArrow(null)}>\n            <TableCell size=\"small\" className=\"smallCol\">{move.san} </TableCell>\n            <TableCell size=\"small\" id={`p${this.props.namespace}${moveIndex}`} className=\"smallCol\" onClick ={this.togglePerformancePopover(moveIndex)}>\n                {simplifyCount(move.moveCount)}{this.getInfoIcon(moveIndex)}\n                {this.getPopover(moveIndex)}\n            </TableCell>\n            <TableCell>\n                <Container>\n                {this.props.settings.movesSettings.openingBookScoreIndicator?\n                <Row className=\"scoresProgress\"><Col className=\"navCol\">\n                {this.compareScores(move)}\n                </Col></Row>:null}\n                <Row><Col className=\"navCol\">\n                <Progress className = \"border\" multi>\n                    <Progress bar className=\"whiteMove\" value={`${this.percentage(move.details.whiteWins,move.details.count)}`}>{this.getProgressLabel(move.details.whiteWins,move.details.count)}</Progress>\n                    <Progress bar className=\"grayMove\" value={`${this.percentage(move.details.draws,move.details.count)}`}>{this.getProgressLabel(move.details.draws,move.details.count)}</Progress>\n                    <Progress bar className=\"blackMove\" value={`${this.percentage(move.details.blackWins,move.details.count)}`}>{this.getProgressLabel(move.details.blackWins,move.details.count)}</Progress>\n                </Progress></Col></Row>\n                {this.props.settings.movesSettings.openingBookWinsIndicator?\n                <Row className=\"zeroHeight\"><Col className=\"navCol\">\n                {this.compareProgress(move)}\n                </Col></Row>:null}\n                </Container>\n            </TableCell>\n        </TableRow>\n    }\n\n    getInfoIcon(moveIndex) {\n        if(this.getTranspositionWarningLevel(moveIndex) === \"warning\"){\n            return <FontAwesomeIcon \n                className={`leftPadding redColor lowOpacity`} \n                icon={faExclamationTriangle}/>\n        }\n        return <FontAwesomeIcon \n            className={`lowOpacity leftPadding`} \n            icon={faInfoCircle}/>\n\n    }\n\n    getProgressLabel(count, total){\n        let percentage = this.percentage(count,total)\n        if(percentage<10) {\n            return ''\n        }\n        if(this.props.showAsPercentage) {\n            return `${percentage.toFixed(1)}%`\n        }\n        return count\n\n    }\n\n    percentage(count, total){\n        return count/total*100\n    }\n    getSingleItemRow(move,lastPlayedGame) {\n        let sampleResultWhite = playerDetails(lastPlayedGame.white, lastPlayedGame.whiteElo)\n        let sampleResultBlack = playerDetails(lastPlayedGame.black, lastPlayedGame.blackElo)\n        let sampleResult = lastPlayedGame.result\n\n        return <TableRow className={`${this.props.highlightMove === move.san?'bgColor ':''}moveRow`} \n                key = {`${move.orig}${move.dest}`} \n                onClick={this.move(move.san)}\n                onMouseOver={this.highlightArrowFn(move).bind(this)} \n                onMouseOut={()=>this.props.highlightArrow(null)}>\n                <TableCell size=\"small\" className=\"smallCol\">{move.san}</TableCell>\n                <TableCell colSpan = \"2\">\n                        {sampleResultWhite} {sampleResult} {sampleResultBlack} {<FontAwesomeIcon className=\"pointerExternalLink\" onClick ={this.props.launchGame(move.details.lastPlayedGame)} icon={faExternalLinkAlt}/>}\n                </TableCell>\n            </TableRow>\n    }\n\n}\n","import React from 'react'\nimport { Table, TableRow, TableBody, TableCell } from '@material-ui/core';\nimport {playerDetails} from './MovesCommon'\n\nexport default class ResultsTable extends React.Component {\n    render() {\n        return <Table>\n            <TableBody>\n                {\n                this.props.gameResults.map(result => {\n                    let whitePlayer = playerDetails(result.white, result.whiteElo)\n                    let blackPlayer = playerDetails(result.black, result.blackElo)\n                    return <TableRow className=\"moveRow\" key = {`${result.url}`} onClick={this.props.launchGame(result)}>\n                        <TableCell>\n                            {result.result===\"1-0\"?<b>{whitePlayer}</b>:whitePlayer} {result.result} {result.result === \"0-1\"?<b>{blackPlayer}</b>:blackPlayer}\n                        </TableCell>\n                    </TableRow>\n                })}\n            </TableBody>\n        </Table>\n    }\n}","import React from 'react'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faUser } from '@fortawesome/free-solid-svg-icons'\nimport MovesTable from './MovesTable'\nimport ResultsTable from './ResultsTable';\n\nexport default class MovesList extends React.Component {\n\n    render(){\n        if(!this.props.playerMoves) {\n            return <div className = \"infoMessage\" >No moves to show. Please select a source from the \n                <span className = \"navLinkButton\" onClick={()=>this.props.switchToUserTab()}> <FontAwesomeIcon icon={faUser} /> User</span> tab and enter the details.</div>\n        }\n        return <div>{(this.props.gameResults && this.props.gameResults.length>0)?this.resultsTable():null}\n                {this.movesTable()}</div>\n    }\n\n    movesTable() {\n        return <MovesTable movesToShow={this.props.playerMoves} namespace='moves'\n                launchGame={this.props.launchGame} settings={this.props.settings}\n                turnColor={this.props.turnColor} onMove={this.props.onMove}\n                clickedEventName=\"MoveClicked\" tableFooter={this.tableFooter()}\n                highlightMove={this.props.highlightMove} \n                compareToClicked={this.props.switchToBookTab}\n                compareToAlt=\"Indicator for book moves - Click me\"\n                settingsChange={this.props.settingsChange}\n                variant={this.props.variant}\n                highlightArrow={this.props.highlightArrow}\n                />\n    }\n    resultsTable() {\n        return <ResultsTable gameResults={this.props.gameResults}\n                launchGame={this.props.launchGame}/>\n    }\n\n    tableFooter() {\n        let hasMoves = (this.props.playerMoves && this.props.playerMoves.length>0)\n        if(this.props.settings.playerName) {\n            if(hasMoves) {\n                return <span>\n                    Showing moves that have been  played {this.props.turnColor === this.props.settings.playerColor? \"by\" : \"by others against\"} <b>{this.props.settings.playerName}</b> in \n                    this position. <b>{this.props.settings.playerName}</b> is playing as <b>{this.props.settings.playerColor}</b>.\n                    </span>\n            } else {\n                return <span>No moves found played by {this.props.turnColor === this.props.settings.playerColor? \"by\" : \"by others against\"} <b>{this.props.settings.playerName}</b> in \n                    this position. <b>{this.props.settings.playerName}</b> is playing as <b>{this.props.settings.playerColor}</b>.</span>\n            }\n        } else {\n            if(hasMoves) {\n                return <span>\n                    Showing all moves that have been played by <b>{this.props.turnColor}</b> in this position.\n                    </span>\n            } else {\n                return <span>\n                    No moves found played by <b>{this.props.turnColor}</b> in this position.\n                    </span>\n            }\n        }\n    }\n\n}","import React from 'react'\nimport MovesTable from './MovesTable'\nimport ResultsTable from './ResultsTable';\nimport { Spinner } from 'reactstrap';\nimport {Card, CardBody, CardText, CardTitle} from 'reactstrap'\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faInfoCircle} from '@fortawesome/free-solid-svg-icons'\nimport { Button as MaterialUIButton } from '@material-ui/core'\nimport Cached from '@material-ui/icons/Cached'\nimport * as Constants from '../../app/Constants'\n\nexport default class BookMove extends React.Component {\n\n    render(){\n        if(!this.props.bookMoves) {\n            return <div className = \"infoMessage\" >No book moves found in this position</div>\n        }\n        return <div>{(this.props.gameResults && this.props.gameResults.length>0)?this.resultsTable():null}\n                {this.movesTable()}</div>\n    }\n\n    enableBook(){\n        let newMovesSettings = Object.assign({},this.props.settings.movesSettings)\n        newMovesSettings.openingBookType = Constants.OPENING_BOOK_TYPE_LICHESS\n        this.props.settingsChange('movesSettings', newMovesSettings)\n    }\n\n    movesTable() {\n        if(this.props.bookMoves.fetch === \"pending\") {\n            return <div className=\"center\"><br/><Spinner/></div>\n        }\n        if(this.props.bookMoves.fetch === \"off\") {\n            return this.offCard('Opening book is disabled',\n                'Click the button below to enable it',\n                this.enableBook.bind(this),'Enable opening book', <Cached />)\n        }\n\n        if(this.props.bookMoves.fetch === \"failed\") {\n            return this.offCard('Failed to fetch book moves',\n                'Please check your internet connection. Lichess could also be down.',\n                this.props.forceFetchBookMoves,'Try again', <Cached />)\n        }\n        if(this.props.bookMoves.moves.length === 0) {\n            return this.offCard('No moves found',\n                'The opening book does not have any moves in this position')\n        }\n\n        return <MovesTable movesToShow={this.props.bookMoves.moves} namespace='book'\n                launchGame={this.props.launchGame} settings={this.props.settings}\n                turnColor={this.props.turnColor} onMove={this.props.onMove}\n                clickedEventName=\"BookMoveClicked\" tab=\"book\" showAsPercentage\n                highlightMove={this.props.highlightMove} \n                compareToClicked={this.props.switchToMovesTab}\n                compareToAlt=\"Indicator for player moves - Click me\"\n                settingsChange={this.props.settingsChange}\n                variant={this.props.variant}\n                highlightArrow={this.props.highlightArrow}\n                />\n    }\n\n    offCard(title, message, action, actionText, actionIcon) {\n        return <Card className=\"errorCard\"><CardBody className=\"singlePadding\">\n        <CardTitle className=\"smallBottomMargin\"><FontAwesomeIcon icon={faInfoCircle} className=\"lowOpacity\"/> {title}</CardTitle>\n        <CardText className=\"smallText\">\n            {message}\n            <br/>\n            <br/>\n            {actionText?<MaterialUIButton\n            onClick={action}\n            variant=\"contained\"\n            color=\"default\"\n            className=\"mainButton\" disableElevation\n            startIcon={actionIcon}\n            >\n                {actionText}\n            </MaterialUIButton>:null}\n        </CardText>\n        </CardBody>\n        </Card>\n    }\n    resultsTable() {\n        return <ResultsTable gameResults={this.props.gameResults}\n                launchGame={this.props.launchGame}/>\n    }\n}","import React from 'react'\nimport PGNLoader from './loader/PGNLoader'\nimport SettingsView from './Settings'\nimport {\n  Badge,\n  Button,\n  Col,\n  Modal,\n  ModalFooter,\n  ModalHeader,\n  Nav,\n  NavItem,\n  NavLink,\n  Row,\n  TabContent,\n  TabPane\n} from 'reactstrap';\nimport classnames from 'classnames';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faUser, faList, faCog, faChartBar, faBook } from '@fortawesome/free-solid-svg-icons'\nimport MovesList from './moves/MovesList'\nimport BookMoves from './moves/BookMoves'\nimport {trackEvent} from '../app/Analytics'\nimport * as Constants from '../app/Constants'\nimport ReportControls from './ReportControls'\nimport { Table, TableRow, TableBody, TableCell } from '@material-ui/core'\n\nexport default class ControlsContainer extends React.Component {\n    constructor(props){\n      super(props)\n      this.state = {\n          activeTab:'user',\n          activeGame:null\n      }\n      this.toggleModal = ()=>{\n        this.setState({activeGame:null})\n      }\n    }\n\n    launchGame(game) {\n      if(game.url) {\n          return (e) => {\n              e.stopPropagation()\n              window.open(game.url, '_blank');\n              trackEvent(Constants.EVENT_CATEGORY_MOVES_LIST, \"ViewGameExternal\")\n          }\n      }\n      return ((e) => {\n        e.stopPropagation()\n        this.setState({activeGame:game})\n      })\n    }\n    shouldComponentUpdate(newProps){\n      if(this.props.resize !== newProps.resize) {\n        // dont update component on resize\n        return false\n      }\n      return true\n    }\n    toggle(tab) {\n        if(this.state.activeTab !== tab) {\n            this.setState({activeTab:tab})\n            trackEvent(Constants.EVENT_CATEGORY_CONTROLS,`activeTab:${tab}`)\n        }\n    }\n    switchToUserTab() {\n      this.toggle('user')\n    }\n    switchToMovesTab(highlightMove) {\n      this.toggle('moves')\n      if(highlightMove) {\n        this.setState({highlightPlayerMove:highlightMove})\n        setTimeout(() => {\n          this.setState({\n            highlightPlayerMove:null\n          })\n        }, 1000);\n      }\n    }\n    switchToBookTab(highlightMove) {\n      this.toggle('book')\n      if(highlightMove) {\n        this.setState({highlightBookMove:highlightMove})\n        setTimeout(() => {\n          this.setState({\n            highlightBookMove:null\n          })\n        }, 1000);\n      }\n    }\n\n    render(){\n        return <div>\n              <Modal isOpen={this.state.activeGame} toggle={this.toggleModal}>\n              <ModalHeader toggle={this.toggleModal}>Game details</ModalHeader>\n              {!this.state.activeGame?null:\n              <Table>\n                <TableBody>\n                  {\n                    Object.entries(this.state.activeGame.headers).map((entry)=>!entry[1]?null:<TableRow className=\"performanceRatingRow\">\n                        <TableCell className=\"performanceRatingRow\">{entry[0]}</TableCell>\n                        <TableCell className=\"performanceRatingRow\">{entry[1]}</TableCell>\n                    </TableRow>\n                    )}\n                </TableBody>\n              </Table>\n              }\n              <ModalFooter>\n          <Button color=\"secondary\" onClick={this.toggleModal}>Done</Button>\n        </ModalFooter>\n              </Modal>\n            <Nav tabs>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: this.state.activeTab === 'user' })}\n            onClick={() => { this.toggle('user'); }}\n          >\n            <FontAwesomeIcon icon={faUser} /> {this.state.activeTab === 'user'?\"User\":\"\"}\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: this.state.activeTab === 'moves' })}\n            onClick={() => { this.toggle('moves'); }}\n          >\n            <FontAwesomeIcon icon={faList} /> {this.state.activeTab === 'moves'?\"Moves\":\"\"}\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: this.state.activeTab === 'book' })}\n            onClick={() => { this.toggle('book'); }}\n          >\n            <FontAwesomeIcon icon={faBook} /> {this.state.activeTab === 'book'?\"Opening book\":<Badge className=\"sourceName\" color=\"info\">New!</Badge>}\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: this.state.activeTab === 'report' })}\n            onClick={() => { this.toggle('report'); }}\n          >\n            <FontAwesomeIcon icon={faChartBar} /> {this.state.activeTab === 'report'?\"Report\":\"\"}\n          </NavLink>\n        </NavItem>\n        <NavItem>\n          <NavLink\n            className={classnames({ active: this.state.activeTab === 'settings' })}\n            onClick={() => { this.toggle('settings'); }}\n          >\n            <FontAwesomeIcon icon={faCog} /> {this.state.activeTab === 'settings'?\"Controls\":\"\"}\n          </NavLink>\n        </NavItem>\n      </Nav>\n      <TabContent activeTab={this.state.activeTab}>\n        <TabPane tabId=\"user\">\n            <PGNLoader\n              switchToMovesTab={this.switchToMovesTab.bind(this)}\n              clear = {this.props.clear}\n              gamesProcessed = {this.props.gamesProcessed}\n              settings = {this.props.settings}\n              onChange = {this.props.settingsChange}\n              notify = {this.props.updateProcessedGames}\n              showError = {this.props.showError}\n              showInfo = {this.props.showInfo}\n              setDownloading = {this.props.setDownloading}\n              isDownloading = {this.props.isDownloading}\n              openingGraph={this.props.openingGraph}\n              importCallback={this.props.importCallback}\n              variant={this.props.variant}\n              variantChange={this.props.variantChange}\n              />\n            </TabPane>\n        <TabPane tabId=\"moves\">\n            <MovesList\n              switchToUserTab={this.switchToUserTab.bind(this)}\n              playerMoves={this.props.playerMoves}\n              gameResults={this.props.gameResults}\n              onMove={this.props.onMove}\n              settings={this.props.settings}\n              turnColor={this.props.turnColor}\n              settingsChange={this.props.settingsChange}\n              launchGame = {this.launchGame.bind(this)}\n              switchToBookTab={this.switchToBookTab.bind(this)}\n              highlightMove={this.state.highlightPlayerMove}\n              variant={this.props.variant}\n              highlightArrow={this.props.highlightArrow}\n            />\n        </TabPane>\n        <TabPane tabId=\"book\">\n            <BookMoves\n              bookMoves={this.props.bookMoves}\n              gameResults={this.props.bookResults}\n              onMove={this.props.onMove}\n              settings={this.props.settings}\n              turnColor={this.props.turnColor}\n              settingsChange={this.props.settingsChange}\n              launchGame = {this.launchGame.bind(this)}\n              switchToMovesTab = {this.switchToMovesTab.bind(this)}\n              highlightMove = {this.state.highlightBookMove}\n              forceFetchBookMoves = {this.props.forceFetchBookMoves}\n              variant={this.props.variant}\n              highlightArrow={this.props.highlightArrow}\n              />\n        </TabPane>\n        <TabPane tabId=\"report\">\n          <ReportControls fen={this.props.fen} simplifiedView = {false}\n            moveDetails = {this.props.openingGraph.getDetailsForFen(this.props.fen)}\n            launchGame={this.launchGame.bind(this)} settings={this.props.settings}\n            switchToUserTab={this.switchToUserTab.bind(this)}\n            isOpen = {this.state.activeTab === \"report\"}\n            showInfo = {this.props.showInfo} reportFooter={this.reportFooter()}/>\n        </TabPane>\n        <TabPane tabId=\"settings\">\n          <Row>\n            <Col sm=\"6\">\n            <SettingsView\n              fen={this.props.fen}\n              settings={this.props.settings}\n              isOpen = {true}\n              clear = {this.props.clear}\n              reset = {this.props.reset}\n              onChange = {this.props.settingsChange} />\n            </Col>\n          </Row>\n        </TabPane>\n      </TabContent>\n        </div>\n    }\n\n    reportFooter(){\n      return <span>Calculated based on <a href=\"https://handbook.fide.com/chapter/B022017\" target=\"_blank\" rel=\"noopener noreferrer\">FIDE regulations</a></span>\n    }\n}","import green from '@material-ui/core/colors/green';\nimport amber from '@material-ui/core/colors/amber';\nimport IconButton from '@material-ui/core/IconButton';\nimport SnackbarContent from '@material-ui/core/SnackbarContent';\nimport Button from '@material-ui/core/Button'\nimport {withStyles} from '@material-ui/core/styles';\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle';\nimport CloseIcon from '@material-ui/icons/Close';\nimport ErrorIcon from '@material-ui/icons/Error';\nimport InfoIcon from '@material-ui/icons/Info';\nimport WarningIcon from '@material-ui/icons/Warning';\nimport clsx from 'clsx';\nimport PropTypes from 'prop-types';\nimport * as React from 'react';\n\nconst variantIcon = {\n    success: CheckCircleIcon,\n    warning: WarningIcon,\n    error: ErrorIcon,\n    info: InfoIcon,\n};\n\nconst styles = (theme) => ({\n    success: {\n        backgroundColor: green[600],\n    },\n    error: {\n        backgroundColor: theme.palette.error.dark,\n    },\n    info: {\n        backgroundColor: theme.palette.primary.dark,\n    },\n    warning: {\n        backgroundColor: amber[700],\n    },\n    icon: {\n        fontSize: 20,\n    },\n    iconVariant: {\n        opacity: 0.9,\n        marginRight: theme.spacing(1),\n    },\n    message: {\n        display: 'flex',\n        alignItems: 'center',\n    },\n});\n\nfunction SnackbarContentWrapper(props) {\n    const {classes, className, message, onClose, variant, subMessage, action, actionText, showReportButton, ...other} = props;\n    const Icon = variantIcon[variant];\n\n    return (\n        <SnackbarContent\n            className={clsx(classes[variant], className)}\n            aria-describedby=\"client-snackbar\"\n            message={\n                <div><span id=\"client-snackbar\" className={classes.message}>\n                    <Icon className={clsx(classes.icon, classes.iconVariant)} />\n                    {message} \n                    \n                </span>\n                {!subMessage?null:<div className=\"smallText\">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{subMessage}</div>}\n                </div>\n            }\n            action={[ \n                !showReportButton?null:<Button key=\"report\" onClick = {action} color=\"inherit\" size=\"small\">\n                  {actionText}\n                </Button>,\n                <IconButton\n                    key=\"close\"\n                    aria-label=\"Close\"\n                    color=\"inherit\"\n                    className={classes.close}\n                    onClick={onClose}\n                >\n                    <CloseIcon className={classes.icon} />\n                </IconButton>\n            ]}\n            {...other}\n        />\n    );\n}\n\nSnackbarContentWrapper.propTypes = {\n    classes: PropTypes.object.isRequired,\n    className: PropTypes.string,\n    message: PropTypes.node,\n    onClose: PropTypes.func,\n    onReport: PropTypes.func,\n    subMessage: PropTypes.string,\n    showReportButton: PropTypes.bool,\n    variant: PropTypes.oneOf(['success', 'warning', 'error', 'info']).isRequired,\n};\n\nexport default withStyles(styles)(SnackbarContentWrapper);","import React from 'react'\nimport Chessground from 'react-chessground'\nimport 'react-chessground/dist/styles/chessground.css'\nimport {\n  Button,\n  Col,\n  Collapse,\n  Container,\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n  Row\n} from 'reactstrap'\n\nimport {\n  Checkbox,\n  FormControlLabel,\n  Snackbar,\n  TextField\n} from '@material-ui/core'\n\nimport * as Constants from '../app/Constants'\nimport OpeningGraph from '../app/OpeningGraph'\nimport { chessLogic } from '../app/chess/ChessLogic'\nimport cookieManager from '../app/CookieManager'\nimport { handleDarkMode } from '../pres/DarkMode';\nimport UserProfile, { USER_PROFILE_NEW_USER } from '../app/UserProfile'\nimport {trackEvent} from '../app/Analytics'\n\nimport Navigator from './Navigator'\nimport GlobalHeader from './GlobalHeader'\nimport ControlsContainer from './ControlsContainer'\nimport { addStateManagement } from './StateManagement'\nimport SnackbarContentWrapper from './SnackbarContentWrapper'\nexport default class MainContainer extends React.Component {\n\n  constructor(props){\n    super(props)\n    let userProfile = UserProfile.getUserProfile()\n    trackEvent(Constants.EVENT_CATEGORY_SEGMENT, \"UserType\", `${userProfile.userType}`, userProfile.numVisits)\n\n    let urlVariant = new URLSearchParams(window.location.search).get(\"variant\")\n    let selectedVariant = urlVariant || Constants.VARIANT_STANDARD\n    this.chess = chessLogic(selectedVariant)\n    addStateManagement(this)\n    this.state = {\n        resize:0,\n        fen: this.chess.fen(),\n        lastMove: null,\n        gamesProcessed:0,\n        openingGraph:new OpeningGraph(selectedVariant),\n        settings:{\n          playerName:'',\n          orientation:Constants.PLAYER_COLOR_WHITE,\n          playerColor:'',\n          movesSettings:this.getMovesSettingsFromCookie(),\n          darkMode: this.getDarkModeSettingFromCookie()\n        },\n        message:'',\n        downloadingGames:false,\n        feedbackOpen:false,\n        diagnosticsDataOpen:false,\n        variant:selectedVariant,\n        update:0,//increase count to force update the component\n        highlightedMove:null\n      }\n    this.chessboardWidth = this.getChessboardWidth()\n\n    this.forBrushes = ['blue','paleGrey', 'paleGreen', 'green']\n    this.againstBrushes = ['blue','paleRed', 'paleRed', 'red']\n    window.addEventListener('resize', this.handleResize.bind(this))\n  }\n  handleResize() {\n    this.setState({resize:this.state.resize+1})\n    this.chessboardWidth = this.getChessboardWidth()\n  }\n\n  getMovesSettingsFromCookie() {\n    let { movesSettings } = cookieManager.getSettingsCookie() || {};\n\n    if (!movesSettings) {\n      // default settings\n      movesSettings = {\n          openingBookType:Constants.OPENING_BOOK_TYPE_LICHESS,\n          openingBookRating:Constants.ALL_BOOK_RATINGS,\n          openingBookTimeControls: [\n            Constants.TIME_CONTROL_BULLET,\n            Constants.TIME_CONTROL_BLITZ,\n            Constants.TIME_CONTROL_RAPID,\n            Constants.TIME_CONTROL_CLASSICAL\n          ],\n          openingBookScoreIndicator:false,\n          openingBookWinsIndicator:UserProfile.getUserProfile().userType>USER_PROFILE_NEW_USER\n        }\n    }\n    trackEvent(Constants.EVENT_CATEGORY_SETTINGS, \"winsIndicator\", `${movesSettings.openingBookWinsIndicator?\"on\":\"off\"}`)\n    trackEvent(Constants.EVENT_CATEGORY_SETTINGS, \"bookType\", movesSettings.openingBookType)\n\n    return movesSettings;\n  }\n\n  getDarkModeSettingFromCookie () {\n    const settings = cookieManager.getSettingsCookie();\n    if(!settings || settings.darMode === null) {\n      return true// default value\n    }\n    return Boolean(settings.darkMode);\n  }\n\n  render() {\n    let lastMoveArray = this.state.lastMove ? [this.state.lastMove.from, this.state.lastMove.to] : null\n    let snackBarOpen = Boolean(this.state.message)\n\n    let playerMoves = this.getPlayerMoves()\n    let bookMoves = this.getBookMoves()\n    this.mergePlayerAndBookMoves(playerMoves, bookMoves)\n\n    return <div className=\"rootView\">\n      <GlobalHeader settings={this.state.settings} \n              toggleFeedback = {this.toggleFeedback(false)}/>\n      <Container className=\"mainContainer\">\n        <Row>\n          <Col lg={{order:0, size:2}} xs={{order:2}}>\n            <Navigator fen = {this.state.fen} move={this.state.lastMove}\n              onChange ={this.navigateTo.bind(this)}\n              variant = {this.state.variant} />\n          </Col>\n          <Col lg=\"6\">\n            <Chessground key={this.state.resize}\n              height={this.chessboardWidth}\n              width={this.chessboardWidth}\n              orientation={this.orientation()}\n              turnColor={this.turnColor()}\n              movable={this.calcMovable()}\n              lastMove={lastMoveArray}\n              fen={this.state.fen}\n              onMove={this.onMoveAction.bind(this)}\n              drawable ={{\n                enabled: true,\n                visible: true,\n                autoShapes: this.autoShapes(playerMoves, this.state.highlightedMove)\n              }}\n              style={{ margin: 'auto' }}\n            />\n          </Col>\n          <Col lg=\"4\" className=\"paddingTop\">\n            <ControlsContainer fen={this.state.fen}\n              resize ={this.state.resize}\n              gamesProcessed={this.state.gamesProcessed}\n              updateProcessedGames={this.updateProcessedGames.bind(this)}\n              settingsChange={this.settingsChange.bind(this)}\n              settings={this.state.settings}\n              reset={this.reset.bind(this)}\n              clear={this.clear.bind(this)}\n              playerMoves={playerMoves}\n              bookMoves={bookMoves}\n              gameResults={this.gameResults()}\n              onMove={this.onMove.bind(this)}\n              turnColor={this.turnColor()}\n              showError={this.showError.bind(this)}\n              showInfo={this.showInfo.bind(this)}\n              setDownloading={this.setDownloading.bind(this)}\n              isDownloading={this.state.downloadingGames}\n              openingGraph={this.state.openingGraph}\n              importCallback={this.importGameState.bind(this)}\n              variant={this.state.variant}\n              variantChange={this.variantChange.bind(this)}\n              forceFetchBookMoves={this.forceFetchBookMoves.bind(this)}\n              highlightArrow={this.highlightArrow.bind(this)}\n            />\n          </Col>\n        </Row>\n      </Container>\n      <Snackbar anchorOrigin={{ vertical:'bottom', horizontal:\"left\" }}\n        open={snackBarOpen} autoHideDuration={6000}\n        onClose={this.closeError.bind(this)}\n      >\n        <SnackbarContentWrapper\n          onClose={this.closeError.bind(this)}\n          variant={this.state.messageSeverity}\n          message={this.state.message}\n          subMessage={this.state.subMessage}\n          showReportButton={this.state.messageSeverity==='error'}\n          action={this.state.errorAction}\n          actionText={this.state.errorActionText}\n        />\n      </Snackbar>\n\n      <Modal isOpen={this.state.feedbackOpen} toggle={this.toggleFeedback(false)}>\n        <ModalHeader toggle={this.toggleFeedback(false)}>\n          Feedback\n        </ModalHeader>\n        <ModalBody>\n          Your feedback is greatly appreciated. Reach out to me for feedback, suggestions, bug report or just a game of chess.\n          <ul>\n            <li>Email me: <a rel=\"noopener noreferrer\" href={this.getEmailLink()} target=\"_blank\">{Constants.OPENING_TREE_EMAIL}</a></li>\n            <li>Message me on reddit <a rel=\"noopener noreferrer\" href={this.getRedditLink()} target=\"_blank\">u/{Constants.OPENING_TREE_REDDIT}</a></li>\n            <li>Message me on lichess: <a rel=\"noopener noreferrer\" href={`https://lichess.org/inbox/${Constants.OPENING_TREE_LICHESS}`} target=\"_blank\">{Constants.OPENING_TREE_LICHESS}</a></li>\n            <li>Message me on chess.com: <a rel=\"noopener noreferrer\" href={`https://www.chess.com/messages/compose/${Constants.OPENING_TREE_CHESS_COM}`} target=\"_blank\">{Constants.OPENING_TREE_CHESS_COM}</a></li>\n            <li>Join my <a rel=\"noopener noreferrer\" href={Constants.OPENING_TREE_DISCORD}target=\"_blank\">discord server</a> to chat</li>\n          </ul>\n          <FormControlLabel\n            control={\n              <Checkbox\n                checked={this.state.diagnosticsDataOpen}\n                onChange={this.toggleDiagnosticsData}\n                name=\"diagnostics\"\n                color=\"primary\"\n              />}\n            label=\"Add diagnostics data to message\"\n          />\n          <Collapse isOpen={this.state.diagnosticsDataOpen}>\n            <TextField id=\"diagnosticsText\" label=\"Click to copy.\" variant=\"outlined\"\n            className=\"fullWidth\" value={this.getDiagnosticsValue()}\n            rowsMax={4} onClick={this.copyDiagnostics} multiline />\n          </Collapse>\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"secondary\" onClick={this.toggleFeedback(false)}>Done</Button>\n        </ModalFooter>\n      </Modal>\n    </div>\n  }\n\n  componentDidMount() {\n      handleDarkMode(this.state.settings.darkMode);\n  }\n}\n","import ReactDOM from 'react-dom'\nimport MainContainer from './pres/MainContainer'\nimport React from 'react'\nimport {trackPageView} from './app/Analytics'\n\nReactDOM.render(<MainContainer />, document.getElementById('root'))\ntrackPageView()","import * as Constants from './Constants'\n\nexport function isAdvancedFiltersEnabled(source) {\n    return source === Constants.SITE_CHESS_DOT_COM ||\n        source === Constants.SITE_LICHESS\n}\n\n\nexport function isFilterPanelEnabled(source, playerName) {\n    if(source === Constants.SITE_EVENT_DB ||\n        source === Constants.SITE_OPENING_TREE_FILE ||\n        source === Constants.SITE_ONLINE_TOURNAMENTS) {\n            return false\n    }\n    return !!playerName\n}\n\nexport function treeSaveDisabledReason(loadedSite, selectedSite, gamesProcessed, isDownloading){\n    if(selectedSite === Constants.SITE_ONLINE_TOURNAMENTS) {\n        return \"Not currently supported for tournaments\"\n    }\n    if(selectedSite !== Constants.SITE_LICHESS && \n        selectedSite !== Constants.SITE_CHESS_DOT_COM) {\n        return \"Only supported for chess.com and lichess\"\n    }\n    if(loadedSite !== selectedSite || gamesProcessed<=0) {\n        return \"You need to analyze games before saving\"\n    }\n    if(isDownloading) {\n        return \"Action not supported while games are loading\"\n    }\n    return ''\n}\nexport function exportFileName(source, playerName, playerColor, selectedEvent, extension) {\n    if(source === Constants.SITE_EVENT_DB) {\n        return `${selectedEvent.name}.${extension}`\n    }\n    if(playerName) {\n        return `${playerName}-${playerColor}.${extension}`\n    }\n    return `openingtree-exportedgames.${extension}`\n}"],"sourceRoot":""}